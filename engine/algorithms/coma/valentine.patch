diff -ruN coma-project/coma-engine/pom.xml coma-project-final/coma-engine/pom.xml
--- coma-project/coma-engine/pom.xml	2020-02-28 16:51:34.673159000 +0100
+++ coma-project-final/coma-engine/pom.xml	2020-02-29 19:43:47.149754000 +0100
@@ -6,33 +6,155 @@
   <artifactId>coma-engine</artifactId>
   <version>0.1-CE-SNAPSHOT</version>
   <packaging>jar</packaging>
-  <name>coma-engine</name>
-  <url>http://maven.apache.org</url>
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <configuration>
-                    <source>1.6</source>
-                    <target>1.6</target>
-                    <encoding>UTF-8</encoding>
-                </configuration>
-            </plugin>
-            <plugin>
+
+	<build>
+		<plugins>
+			<plugin>
+				<artifactId>maven-assembly-plugin</artifactId>
+				<configuration>
+					<descriptorRefs>
+						<descriptorRef>jar-with-dependencies</descriptorRef>
+					</descriptorRefs>
+					<archive>
+						<manifest>
+							<mainClass>Main</mainClass>
+						</manifest>
+					</archive>
+				</configuration>
+				<executions>
+					<execution>
+						<id>make-assembly</id>
+						<phase>package</phase>
+						<goals>
+							<goal>single</goal>
+						</goals>
+					</execution>
+				</executions>
+			</plugin>
+
+			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-source-plugin</artifactId>
+				<artifactId>maven-install-plugin</artifactId>
 				<executions>
 					<execution>
-						<id>attach-sources</id>
+						<id>install-external1</id>
+						<phase>clean</phase>
+						<configuration>
+							<file>${basedir}/../lib/hadoop-core-0.20.2.jar</file>
+							<repositoryLayout>default</repositoryLayout>
+							<groupId>org.apache.mahout.hadoop</groupId>
+							<artifactId>hadoop-core</artifactId>
+							<version>0.20.2</version>
+							<packaging>jar</packaging>
+							<generatePom>true</generatePom>
+						</configuration>
+						<goals>
+							<goal>install-file</goal>
+						</goals>
+					</execution>
+					<execution>
+						<id>install-external2</id>
+						<phase>clean</phase>
+						<configuration>
+							<file>${basedir}/../lib/jgrapht-jdk1.6-0.8.1.jar</file>
+							<repositoryLayout>default</repositoryLayout>
+							<groupId>org.jgrapht</groupId>
+							<artifactId>jgrapht-jdk1.6</artifactId>
+							<version>0.8.1</version>
+							<packaging>jar</packaging>
+							<generatePom>true</generatePom>
+						</configuration>
+						<goals>
+							<goal>install-file</goal>
+						</goals>
+					</execution>
+					<execution>
+						<id>install-external3</id>
+						<phase>clean</phase>
+						<configuration>
+							<file>${basedir}/../lib/MatchLibrary-CE-1.0.2.jar</file>
+							<repositoryLayout>default</repositoryLayout>
+							<groupId>de.wdilab</groupId>
+							<artifactId>MatchLibrary-CE</artifactId>
+							<version>1.0.2</version>
+							<packaging>jar</packaging>
+							<generatePom>true</generatePom>
+						</configuration>
+						<goals>
+							<goal>install-file</goal>
+						</goals>
+					</execution>
+					<execution>
+						<id>install-external4</id>
+						<phase>clean</phase>
+						<configuration>
+							<file>${basedir}/../lib/owlapi-3.2.2.jar</file>
+							<repositoryLayout>default</repositoryLayout>
+							<groupId>org.semanticweb</groupId>
+							<artifactId>owlapi</artifactId>
+							<version>3.2.2</version>
+							<packaging>jar</packaging>
+							<generatePom>true</generatePom>
+						</configuration>
+						<goals>
+							<goal>install-file</goal>
+						</goals>
+					</execution>
+					<execution>
+						<id>install-external5</id>
+						<phase>clean</phase>
+						<configuration>
+							<file>${basedir}/../lib/align-4.2-align.jar</file>
+							<repositoryLayout>default</repositoryLayout>
+							<groupId>align</groupId>
+							<artifactId>align</artifactId>
+							<version>4.2</version>
+							<classifier>align</classifier>
+							<packaging>jar</packaging>
+							<generatePom>true</generatePom>
+						</configuration>
+						<goals>
+							<goal>install-file</goal>
+						</goals>
+					</execution>
+					<execution>
+						<id>install-external6</id>
+						<phase>clean</phase>
+						<configuration>
+							<file>${basedir}/../lib/align-4.2-procalign.jar</file>
+							<repositoryLayout>default</repositoryLayout>
+							<groupId>align</groupId>
+							<artifactId>align</artifactId>
+							<version>4.2</version>
+							<classifier>procalign</classifier>
+							<packaging>jar</packaging>
+							<generatePom>true</generatePom>
+						</configuration>
+						<goals>
+							<goal>install-file</goal>
+						</goals>
+					</execution>
+					<execution>
+						<id>install-external7</id>
+						<phase>clean</phase>
+						<configuration>
+							<file>${basedir}/../lib/align-4.2-ontowrap.jar</file>
+							<repositoryLayout>default</repositoryLayout>
+							<groupId>align</groupId>
+							<artifactId>align</artifactId>
+							<version>4.2</version>
+							<classifier>ontowrap</classifier>
+							<packaging>jar</packaging>
+							<generatePom>true</generatePom>
+						</configuration>
 						<goals>
-							<goal>jar</goal>
+							<goal>install-file</goal>
 						</goals>
 					</execution>
 				</executions>
 			</plugin>
-        </plugins>
-    </build>
+		</plugins>
+	</build>
 
 	  <properties>
 	    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -45,9 +167,9 @@
 	      	<scope>test</scope>
 	    </dependency>    
 		<dependency>
-	  		<groupId>mysql</groupId>
-	  		<artifactId>mysql-connector-java</artifactId>
-	  		<version>5.1.9</version>
+	  		<groupId>org.xerial</groupId>
+	  		<artifactId>sqlite-jdbc</artifactId>
+	  		<version>3.7.2</version>
 		</dependency>
 		<dependency>
 	  		<groupId>org.codehaus.jettison</groupId>
@@ -139,12 +261,9 @@
 		<version>0.5</version>
 		</dependency>
 		<dependency>
-		<!-- be aware: this library is not in the maven repository but in the parent lib folder -->
 		<groupId>org.apache.mahout.hadoop</groupId>
 		<artifactId>hadoop-core</artifactId>
 		<version>0.20.2</version>
-		<scope>system</scope>
-		<systemPath>${basedir}/../lib/hadoop-core-0.20.2.jar</systemPath>
 		</dependency>
 		<dependency>
 			<groupId>com.google.guava</groupId>
@@ -156,57 +275,38 @@
 			<artifactId>javolution</artifactId>
 			<version>5.5.1</version>
 		</dependency>
-		
 		<dependency>
-		<!-- be aware: this library is not in the maven repository but in the parent lib folder -->		
 		  	<groupId>org.jgrapht</groupId>
 		 	<artifactId>jgrapht-jdk1.6</artifactId> 
-		 	<version>0.8.1</version> 
-		 	<scope>system</scope>
-		  	<systemPath>${basedir}/../lib/jgrapht-jdk1.6-0.8.1.jar</systemPath>
+		 	<version>0.8.1</version>
 		</dependency>
 		<dependency>
-		<!-- be aware: this library is not in the maven repository but in the parent lib folder -->
 		  <groupId>de.wdilab</groupId>
 		  <artifactId>MatchLibrary-CE</artifactId>
 		  <version>1.0.2</version>
-		  <scope>system</scope>
-		  <systemPath>${basedir}/../lib/MatchLibrary-CE-1.0.2.jar</systemPath>
 		</dependency>		
 		<dependency>
-		<!-- be aware: this library is not in the maven repository but in the parent lib folder -->
   			<groupId>org.semanticweb</groupId>
   			<artifactId>owlapi</artifactId>
   			<version>3.2.2</version>
-  			 <scope>system</scope>
-		  	<systemPath>${basedir}/../lib/owlapi-3.2.2.jar</systemPath>
 		</dependency>	
 		<dependency>
-		<!-- be aware: this library is not in the maven repository but in the parent lib folder -->
 		  <groupId>align</groupId>
 		  <artifactId>align</artifactId> 
 		  <version>4.2</version>
 		  <classifier>align</classifier>
-		  <scope>system</scope>
-		  <systemPath>${basedir}/../lib/align-4.2-align.jar</systemPath>
 		</dependency>
 		<dependency>
-		<!-- be aware: this library is not in the maven repository but in the parent lib folder -->
 		  <groupId>align</groupId>
 		  <artifactId>align</artifactId>
 		  <version>4.2</version>
 		  <classifier>procalign</classifier>
-		  <scope>system</scope>
-		  <systemPath>${basedir}/../lib/align-4.2-procalign.jar</systemPath>
 		</dependency>
 		<dependency>
-		<!-- be aware: this library is not in the maven repository but in the parent lib folder -->
 		  <groupId>align</groupId>
 		  <artifactId>align</artifactId>
 		  <version>4.2</version>
 		  <classifier>ontowrap</classifier>
-		  <scope>system</scope>
-		  <systemPath>${basedir}/../lib/align-4.2-ontowrap.jar</systemPath>
 		</dependency>
   </dependencies>
 </project>
\ No newline at end of file
diff -ruN coma-project/coma-engine/src/main/java/de/wdilab/coma/insert/InsertParser.java coma-project-final/coma-engine/src/main/java/de/wdilab/coma/insert/InsertParser.java
--- coma-project/coma-engine/src/main/java/de/wdilab/coma/insert/InsertParser.java	2020-02-28 16:51:35.053159000 +0100
+++ coma-project-final/coma-engine/src/main/java/de/wdilab/coma/insert/InsertParser.java	2020-01-27 00:57:18.000000000 +0100
@@ -98,6 +98,11 @@
 		this.type= type;
 		if (dbInsert){
 			dataImport = new DataImport();
+
+			//ADDED BY CK
+
+			prep = new GraphPreprocessing(null, new ExecWorkflow());
+
 		} else {
 			prep = new GraphPreprocessing(null, new ExecWorkflow());
 		}
@@ -231,6 +236,14 @@
 				// insert source_rel, set status import_started
 				sourcerel_id = dataImport.insertSourceRel(source_id, source_id, SourceRelationship.REL_IS_A, null, null, null, Graph.PREP_LOADED, date);
 				dataImport.updateSourceRel(sourcerel_id, Repository.STATUS_IMPORT_STARTED);
+
+				// added by CK
+
+				graph = new Graph();
+				idsUsed = new HashSet<Integer>();
+				int id = (int) System.currentTimeMillis();
+				Source source = new Source(source_id, sourceName, Source.typeToString(type), null, provider, date);
+				graph.setSource(source);
 			} else {
 				graph = new Graph();
 				idsUsed = new HashSet<Integer>();
@@ -275,6 +288,16 @@
 	    if (dbInsert){
 	    	dataImport.updateSource(source_id, Repository.STATUS_IMPORT_DONE);
 	    	dataImport.updateSourceRel(sourcerel_id, Repository.STATUS_IMPORT_DONE);
+
+	    	// ADDED BY CK
+
+			if (this instanceof ListParser){
+				graph=null;
+			} else {
+				// check cycles and preprocess
+				graph.checkGraphCycles();
+				prep.preprocessGraph(graph);
+			}
 	    } else {
 	    	if (this instanceof ListParser){
 	    		graph=null;
@@ -304,7 +327,14 @@
 	
 	public int insertObject(int sourceId, String accession, String name, int kind) {
 		if (dbInsert){
-			return dataImport.insertObject(sourceId, accession, name, null, null, kind, null, null);
+			//ADDED BY CK
+			int id = dataImport.insertObject(sourceId, accession, name, null, null, kind, null, null);
+			while (idsUsed.contains(id)) id++;
+			Element element = new Element(id, sourceId, name, accession, null, null, kind, null, null);
+			graph.addVertex(element);
+			idsUsed.add(id);
+			//END
+			return id;
 		}
 		int id = idsUsed.size()+1;
 		while (idsUsed.contains(id)) id++;
@@ -358,7 +388,21 @@
 	
 	public void insertLink(int sourceRelId, int object1Id, int object2Id, String type) {
 		if (dbInsert){
+			//ADDED BY CK
+			Element element1 = graph.getElementWithId(object1Id);
+			if (element1==null){
+				System.out.println("InsertParser.insertLink Error element with that id not found " + object1Id);
+				return;
+			}
+			Element element2 = graph.getElementWithId(object2Id);
+			if (element2==null){
+				System.out.println("InsertParser.insertLink Error element with that id not found " + object2Id);
+				return;
+			}
+			graph.addEdge(element1, element2);
+			//ADDED BY CK
 			dataImport.insertObjectRel(sourceRelId, object1Id, object2Id, -1, type) ;
+
 		} else {
 			Element element1 = graph.getElementWithId(object1Id);
 			if (element1==null){
diff -ruN coma-project/coma-engine/src/main/java/de/wdilab/coma/insert/instance/InstanceCSVParser.java coma-project-final/coma-engine/src/main/java/de/wdilab/coma/insert/instance/InstanceCSVParser.java
--- coma-project/coma-engine/src/main/java/de/wdilab/coma/insert/instance/InstanceCSVParser.java	2020-02-28 16:51:35.053159000 +0100
+++ coma-project-final/coma-engine/src/main/java/de/wdilab/coma/insert/instance/InstanceCSVParser.java	2020-01-27 13:52:44.000000000 +0100
@@ -46,7 +46,7 @@
   public Graph parseInstances(Graph schemaGraph){
 	  String file = schemaGraph.getSource().getProvider();
 	  int id = schemaGraph.getSource().getId();
-//	  importer.createInstancesTable(id);
+	  //importer.createInstancesTable(id);
 	  importer.prepareInstancesStatement(id);
 	  ArrayList<Element> inners = schemaGraph.getInners();
 	  for (int i = 0; i < inners.size(); i++) {
@@ -64,7 +64,7 @@
 	  return schemaGraph;
   }
   
-  private void parseInstancesForFile(String fileName, Element root, ArrayList<Element> elements){
+  public void parseInstancesForFile(String fileName, Element root, ArrayList<Element> elements){
 //	  int connect = 1; // counts the current instance data set
 	  
 //	  String fileName = root.getProvider();
diff -ruN coma-project/coma-engine/src/main/java/de/wdilab/coma/integration/COMA_API.java coma-project-final/coma-engine/src/main/java/de/wdilab/coma/integration/COMA_API.java
--- coma-project/coma-engine/src/main/java/de/wdilab/coma/integration/COMA_API.java	2020-02-28 16:51:35.049159000 +0100
+++ coma-project-final/coma-engine/src/main/java/de/wdilab/coma/integration/COMA_API.java	2020-02-26 17:46:01.000000000 +0100
@@ -17,6 +17,10 @@
 
 package de.wdilab.coma.integration;
 
+import de.wdilab.coma.insert.instance.InstanceCSVParser;
+import de.wdilab.coma.repository.DataAccess;
+import de.wdilab.coma.repository.DataImport;
+import de.wdilab.coma.structure.*;
 import org.semanticweb.owl.align.AlignmentException;
 
 import de.wdilab.coma.center.Manager;
@@ -24,15 +28,16 @@
 import de.wdilab.coma.insert.metadata.*;
 import de.wdilab.coma.matching.*;
 import de.wdilab.coma.matching.execution.ExecWorkflow;
-import de.wdilab.coma.structure.EvaluationMeasure;
-import de.wdilab.coma.structure.Graph;
-import de.wdilab.coma.structure.MatchResult;
-import de.wdilab.coma.structure.Source;
 import fr.inrialpes.exmo.align.impl.eval.PRecEvaluator;
 import fr.inrialpes.exmo.align.parser.AlignmentParser;
+
+import java.io.BufferedWriter;
+import java.io.FileWriter;
+import java.io.IOException;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 
 /**
  * This class provides a small API for the usage of the
@@ -127,11 +132,13 @@
 	 * @return match result
 	 * function: given two uri, load and match schemas/ontologies (default/automatic configuration), return match result
 	 */
-	public MatchResult matchModelsDefault(String fileSrc, String fileTrg){
+	public MatchResult matchModelsDefault(String fileSrc, String fileTrg, String fileName) throws IOException {
 		Graph graphSrc = loadGraph(fileSrc, null);
 		Graph graphTrg = loadGraph(fileTrg, null);
+
+
 		ExecWorkflow exec = new ExecWorkflow();
-		Strategy strategy = new Strategy(Strategy.COMA_OPT);
+		Strategy strategy = new Strategy(System.getProperty("strategy"), Integer.parseInt(System.getProperty("maxN")));
 		if (graphSrc.getSource().getType()== Source.TYPE_ONTOLOGY
 				|| graphTrg.getSource().getType()== Source.TYPE_ONTOLOGY){
 			strategy.setResolution( new Resolution(Resolution.RES1_NODES));
@@ -152,6 +159,14 @@
 		if (results.length>1){
 			System.err.println("COMA_API.matchModelsDefault results unexpected more than one, only first one returned");
 		}
+
+
+		BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
+		writer.write(results[0].toString());
+
+		writer.close();
+
+		System.out.println(results[0].toString());
 		return results[0];
 	}
 	
@@ -180,7 +195,7 @@
 		
 		// init ExecWorkflow with abbreviatons and synonyms
 		ExecWorkflow exec = new ExecWorkflow(abbrevList, fullFormList, wordList, synonymList);
-		Strategy strategy = new Strategy(Strategy.COMA_OPT);
+		Strategy strategy = new Strategy(System.getProperty("strategy"), Integer.valueOf(System.getProperty("maxN")));
 		if (graphSrc.getSource().getType()== Source.TYPE_ONTOLOGY
 				|| graphTrg.getSource().getType()== Source.TYPE_ONTOLOGY){
 			strategy.setResolution( new Resolution(Resolution.RES1_NODES));
@@ -216,7 +231,7 @@
 			System.out.println("COMA_API.loadGraph Error file is null");
 			return null;
 		}
-		boolean insertDB = false;
+		boolean insertDB = true;
 		String filetype = file.toLowerCase();
 		filetype = filetype.substring(filetype.lastIndexOf("."));
 		InsertParser par = null;
@@ -231,7 +246,11 @@
 		} else if (filetype.equals(InsertParser.OWL) || filetype.equals(InsertParser.RDF)){
 			par = new OWLParser_V3(insertDB);
 		}
-		
+
+		InstanceCSVParser inpar = new InstanceCSVParser(par.getDataImport());
+
+
+
 		if (par==null){
 			System.out.println("COMA_API.loadGraph Error filetype not recognized");
 			return null;
@@ -239,6 +258,30 @@
 		
 		par.parseSingleSource(file);
 		Graph graph = par.getGraph();
+
+		DataAccess dbreader = new DataAccess(par.getDataImport().getConnection());
+
+		if (!dbreader.existInstancesTable(graph.getSource().getId())) {
+			par.getDataImport().createInstancesTable(graph.getSource().getId());
+		}
+		else{
+			par.getDataImport().deleteInstances(graph.getSource().getId());
+			par.getDataImport().createInstancesTable(graph.getSource().getId());
+		}
+
+
+		graph = inpar.parseInstances(graph.getGraph(Graph.PREP_RESOLVED));
+
+
+		//graph = manager.getAccessor().loadAndPropagateInstances(manager.getAccessor().loadInstances(graph.getSource(), graph.getElementSet()), graph);
+		//graph = inpar.parseInstances(graph);
+
+
+		graph = dbreader.loadAndPropagateInstances(true, graph);
+
+		//ArrayList<Element> listel = new ArrayList<Element>();
+		//listel.addAll(graph.getElementSet());
+		//inpar.parseInstancesForFile(file, null, listel);
 		return graph;
 	}
 	
diff -ruN coma-project/coma-engine/src/main/java/de/wdilab/coma/matching/execution/ExecWorkflow.java coma-project-final/coma-engine/src/main/java/de/wdilab/coma/matching/execution/ExecWorkflow.java
--- coma-project/coma-engine/src/main/java/de/wdilab/coma/matching/execution/ExecWorkflow.java	2020-02-28 16:51:35.061159000 +0100
+++ coma-project-final/coma-engine/src/main/java/de/wdilab/coma/matching/execution/ExecWorkflow.java	2020-01-23 15:01:56.000000000 +0100
@@ -332,6 +332,7 @@
 				fakeSim[i][j]=1;
 			}
 		}
+
 		MatchResult result = new MatchResultArray(srcObjects, trgObjects, fakeSim);
 		
 		return result;
diff -ruN coma-project/coma-engine/src/main/java/de/wdilab/coma/matching/Strategy.java coma-project-final/coma-engine/src/main/java/de/wdilab/coma/matching/Strategy.java
--- coma-project/coma-engine/src/main/java/de/wdilab/coma/matching/Strategy.java	2020-02-28 16:51:35.057159000 +0100
+++ coma-project-final/coma-engine/src/main/java/de/wdilab/coma/matching/Strategy.java	2020-02-08 00:11:55.000000000 +0100
@@ -35,7 +35,7 @@
 	// start counting 6000 Manager.COMPLEXSTRAT_CNT
 
 
-	public static final int CONTEXT = Constants.STRAT_CNT + 1;
+	public static final int CONTEXT = Constants.STRAT_CNT + 1;  // 5000 + 1
 	public static final int NODES = Constants.STRAT_CNT + 2;
 	public static final int COMA_OPT = Constants.STRAT_CNT + 3;
 	public static final int COMA = Constants.STRAT_CNT + 4;
@@ -136,9 +136,17 @@
 		this.cm = cm;
 		this.selection = selection;
 	}
-	
+
+	public Strategy(int strategy) {
+    	this(strategy, 0);
+	}
+
+	public Strategy(String strategy, int maxN) {
+    	this(getStrategy(strategy), maxN);
+	}
+
 	// Constructor of a pre-defined strategy
-	public Strategy (int strategy){
+	public Strategy (int strategy, int maxN) {
 		// create one of the default strategy
 		switch (strategy) {
 
@@ -146,7 +154,7 @@
 			this.resolution = new Resolution(Resolution.RES1_PATHS);
 			cm = new ComplexMatcher[1];
 			cm[0] = new ComplexMatcher(ComplexMatcher.PATH);
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, 0, (float)0.01, (float)0.5);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, maxN, (float)0.01, (float)0.5);
 			setName("ContextS");
 			break;	
 		case NODES :	// $NodeStrategy=(Nodes;$NametokenSynCMatcher,$LeavesStrategy,$ParentsStrategy,$SiblingsStrategy;Average;Both,Multiple(0,0.01,0.5))
@@ -173,7 +181,7 @@
 //			simCombination = new Combination(Combination.COM_AVERAGE);
 			simCombination = new Combination(Combination.COM_WEIGHTED, new float[]{(float)0.7, (float)0.3});
 //			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, 0, (float)0.01, (float)0.5);
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MAXN, 1, 0, 0);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MAXN, maxN, 0, 0);
 			setName("NodesS");
 			break;	
 			
@@ -182,14 +190,14 @@
 			cm = new ComplexMatcher[1];
 			cm[0] = new ComplexMatcher(ComplexMatcher.NAME); // NAMETYPE NAMESTAT
 //			cm[0] = new ComplexMatcher(Resolution.RES2_SELFNODE,	new Matcher(Matcher.NAME),Combination.SET_AVERAGE );
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, 0, (float)0.01, (float)0.5);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, maxN, (float)0.01, (float)0.5);
 			setName("NodesNameS");
 			break;	
 		case NODES_PATH :	
 			this.resolution = new Resolution(Resolution.RES1_NODES);
 			cm = new ComplexMatcher[1];
 			cm[0] = new ComplexMatcher(ComplexMatcher.PATH);
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, 0, (float)0.01, (float)0.5);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, maxN, (float)0.01, (float)0.5);
 			setName("NodesPathS");
 			break;	
 		case COMA_OPT :	// $ComaOptStrategy=(Paths;$NametokenSynCMatcher,$PathCMatcher,$LeavesStrategy,$ParentsStrategy;Average;Both,Multiple(0,0.01,0.4))
@@ -200,7 +208,7 @@
 			cm[2] = new ComplexMatcher(ComplexMatcher.LEAVES);
 			cm[3] = new ComplexMatcher(ComplexMatcher.PARENTS);
 			simCombination = new Combination(Combination.COM_AVERAGE);
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, 0, (float)0.01, (float)0.4);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, maxN, (float)0.01, (float)0.0);
 			setName("ComaOptS");
 			break;	
 		case COMA_OPT_INST :	// $ComaOptStrategy=(Paths;$NametokenSynCMatcher,$PathCMatcher,$InstanceCMatcher,$LeavesStrategy,$ParentsStrategy;Average;Both,Multiple(0,0.01,0.4))
@@ -212,7 +220,7 @@
 			cm[3] = new ComplexMatcher(ComplexMatcher.LEAVES);
 			cm[4] = new ComplexMatcher(ComplexMatcher.PARENTS);
 			simCombination = new Combination(Combination.COM_AVERAGE);
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, 0, (float)0.01, (float)0.4);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, maxN, (float)0.01, (float)0.0);
 			setName("ComaOptInstS");
 			break;	
 		case COMA :		// $ComaStrategy=(Paths;$NametokenSynCMatcher,$PathCMatcher,$LeavesStrategy,$ParentsStrategy,$SiblingsStrategy;Average;Both,Multiple(0,0.008,0.5))
@@ -224,7 +232,7 @@
 			cm[3] = new ComplexMatcher(ComplexMatcher.PARENTS);
 			cm[4] = new ComplexMatcher(ComplexMatcher.SIBLINGS);
 			simCombination = new Combination(Combination.COM_AVERAGE);
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, 0, (float)0.008, (float)0.5);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, maxN, (float)0.008, (float)0.5);
 			setName("ComaS");
 			break;	
 		case SIMPLE_NAMEPATH :	
@@ -233,14 +241,14 @@
 			cm[0] = new ComplexMatcher(ComplexMatcher.NAMETYPE); // NAMETOKENSYN NAMESTAT
 			cm[1] = new ComplexMatcher(ComplexMatcher.PATH);
 			simCombination = new Combination(Combination.COM_AVERAGE);
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, 0, (float)0.01, (float)0.2);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MULTIPLE, maxN, (float)0.01, (float)0.2);
 			setName("SimpleNamePathS");
 			break;
 		case NODE_SELECTION:	// $NodeSelectionStrategy=(Nodes;$NametokenSynCMatcher;Both,Threshold(0.3));
 			this.resolution = new Resolution(Resolution.RES1_NODES);
 			cm = new ComplexMatcher[1];
 			cm[0] = new ComplexMatcher(ComplexMatcher.NAMETYPE); // NAMETOKENSYN
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_THRESHOLD, 0, 0, (float)0.3);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_THRESHOLD, maxN, 0, (float)0.3);
 			setName("NodeSelectionS");
 			break;
 		case UPPATH_SELECTION:	// $UpPathSelectionStrategy=(UpPaths;$PathCMatcher;Both,Threshold(0.5));
@@ -248,14 +256,14 @@
 			this.resolution = new Resolution(Resolution.RES1_UPPATHS);
 			cm = new ComplexMatcher[1];
 			cm[0] = new ComplexMatcher(ComplexMatcher.PATH);
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_THRESHOLD, 0, 0, (float)0.5);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_THRESHOLD, maxN, 0, (float)0.5);
 			setName("UpPathSelectionS");
 			break;
 		case FRAG_SELECTION:	// $FragSelectionStrategy=(Innerpaths;$NamePathStrategy; Both,Threshold(0.3))
 			this.resolution = new Resolution(Resolution.RES1_INNERPATHS);
 			cm = new ComplexMatcher[1];
 			cm[0] = new ComplexMatcher(ComplexMatcher.NAMEPATH);
-			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MAXN, 3);
+			selection = new Selection(Selection.DIR_BOTH, Selection.SEL_MAXN, maxN);
 			setName("FragSelectionS");
 			break;				
 		case DOWNPATH_SELECTION:	// $DownPathSelectionStrategy=(DownPaths;$NameTypeCMatcher;Both,Threshold(0.3))
@@ -271,7 +279,34 @@
 			break;
 		}
 	}
-	
+
+	static int getStrategy(String strategy) {
+    	if (strategy.equals("CONTEXT"))
+    		return CONTEXT;
+    	else if (strategy.equals("NODES"))
+    		return NODES;
+		else if (strategy.equals("COMA_OPT"))
+			return COMA_OPT;
+		else if (strategy.equals("COMA_OPT_INST"))
+			return COMA_OPT_INST;
+		else if (strategy.equals("COMA"))
+			return COMA;
+		else if (strategy.equals("SIMPLE_NAMEPATH"))
+			return SIMPLE_NAMEPATH;
+		else if (strategy.equals("NODE_SELECTION"))
+			return NODE_SELECTION;
+		else if (strategy.equals("UPPATH_SELECTION"))
+			return UPPATH_SELECTION;
+		else if (strategy.equals("FRAG_SELECTION"))
+			return FRAG_SELECTION;
+		else if (strategy.equals("DOWNPATH_SELECTION"))
+			return DOWNPATH_SELECTION;
+		else if (strategy.equals("NODES_NAME"))
+			return NODES_NAME;
+		else
+			return NODES_PATH;
+
+	}
 
 	//simple getter
 	public Resolution getResolution() { return resolution; }
diff -ruN coma-project/coma-engine/src/main/java/de/wdilab/coma/repository/MySQL.java coma-project-final/coma-engine/src/main/java/de/wdilab/coma/repository/MySQL.java
--- coma-project/coma-engine/src/main/java/de/wdilab/coma/repository/MySQL.java	2020-02-28 16:51:35.061159000 +0100
+++ coma-project-final/coma-engine/src/main/java/de/wdilab/coma/repository/MySQL.java	2020-02-08 00:55:13.000000000 +0100
@@ -14,128 +14,127 @@
  *  You should have received a copy of the GNU Affero General Public License
  *  along with this program.  If not, see http://www.gnu.org/licenses/.
  */
-
 package de.wdilab.coma.repository;
-
 /**
  * This class contains the create, drop and insert mysql statements
  * for the mainly used table.
- * 
+ *
  * @author Hong Hai Do, Sabine Massmann
  */
 public class MySQL {
-	
 	static final String CREATE_TABLE = "CREATE TABLE IF NOT EXISTS ";
 	static final String DROP_TABLE = "DROP TABLE IF EXISTS ";
 	static final String INSERT_INTO = "INSERT INTO ";
 	static final String SELECT = "SELECT ";
 	static final String UPDATE = "UPDATE ";
-	static final String INFO_TABLE = "INFORMATION_SCHEMA.TABLES";
-
-	static final String CREATE_SOURCE = CREATE_TABLE + Repository.TABLE_SOURCE + " (" +	 
-		"source_id  INTEGER       AUTO_INCREMENT, " +  // generated
-		"name       VARCHAR(100)  BINARY NOT NULL, " +
-		"type       VARCHAR(50)  NOT NULL, " +
-		"url        LONG VARCHAR  NULL, " +
-		"provider   VARCHAR(250)  NULL, " +
-		"date       VARCHAR(50)   NULL, " +
-		// additional information
-		"author     VARCHAR(50)   NULL, " +
-		"domain     VARCHAR(50)   NULL, " +
-		"version    VARCHAR(50)   NULL, " +
-		"comment    LONG VARCHAR  NULL, " +		
-		"status     VARCHAR(50)  NULL, " + // import status
-		"PRIMARY KEY(source_id))  ENGINE = MYISAM";
+	static final String INFO_TABLE = "SQLITE_MASTER";
+	static final String CREATE_SOURCE = CREATE_TABLE + Repository.TABLE_SOURCE + " (" +
+			"source_id  INTEGER       AUTO_INCREMENT, " +  // generated
+			//"name       VARCHAR(100)  BINARY NOT NULL, " +
+			"name       VARCHAR(100)  NOT NULL, " +
+			"type       VARCHAR(50)  NOT NULL, " +
+			"url        LONG VARCHAR  NULL, " +
+			"provider   VARCHAR(250)  NULL, " +
+			"date       VARCHAR(50)   NULL, " +
+			// additional information
+			"author     VARCHAR(50)   NULL, " +
+			"domain     VARCHAR(50)   NULL, " +
+			"version    VARCHAR(50)   NULL, " +
+			"comment    LONG VARCHAR  NULL, " +
+			"status     VARCHAR(50)  NULL, " + // import status
+			"PRIMARY KEY(source_id))";
 	static final String DROP_SOURCE = DROP_TABLE + Repository.TABLE_SOURCE;
 	static final String INSERT_SOURCE = INSERT_INTO + Repository.TABLE_SOURCE +
-		"(name, type, url, provider, date, author, domain, version, comment)" +
-		" VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
-
+			"(name, type, url, provider, date, author, domain, version, comment)" +
+			" VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
 	static final String CREATE_SOURCE_REL = CREATE_TABLE + Repository.TABLE_SOURCE_REL + " (" +
-		"sourcerel_id   INTEGER      AUTO_INCREMENT, " +
-		"source1_id     INTEGER      NOT NULL, " +
-		"source2_id     INTEGER      NOT NULL, " +
-		"type           INTEGER 	 NOT NULL, " +
-		"name           VARCHAR(100) NULL, " +
-		"comment        LONG VARCHAR NULL, " +
-		"provider       VARCHAR(250) NULL, " +
-		"preprocessing  INTEGER NULL, " +
-		"date           VARCHAR(50)  NULL, " +
-		"status  		VARCHAR(50) NULL, " + // import status
-		"PRIMARY KEY(sourcerel_id)," +
-		"UNIQUE(source1_id, source2_id, type, name))  ENGINE = MYISAM";
+			"sourcerel_id   INTEGER      AUTO_INCREMENT, " +
+			"source1_id     INTEGER      NOT NULL, " +
+			"source2_id     INTEGER      NOT NULL, " +
+			"type           INTEGER     NOT NULL, " +
+			"name           VARCHAR(100) NULL, " +
+			"comment        LONG VARCHAR NULL, " +
+			"provider       VARCHAR(250) NULL, " +
+			"preprocessing  INTEGER NULL, " +
+			"date           VARCHAR(50)  NULL, " +
+			"status       VARCHAR(50) NULL, " + // import status
+			"PRIMARY KEY(sourcerel_id)," +
+			"UNIQUE(source1_id, source2_id, type, name))";
 	static final String DROP_SOURCE_REL = DROP_TABLE + Repository.TABLE_SOURCE_REL;
-	static final String INSERT_SOURCE_REL = INSERT_INTO + Repository.TABLE_SOURCE_REL + 
-		"(source1_id, source2_id, type, name, comment, provider, preprocessing, date)" +
-		" VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
-	
+	static final String INSERT_SOURCE_REL = INSERT_INTO + Repository.TABLE_SOURCE_REL +
+			"(source1_id, source2_id, type, name, comment, provider, preprocessing, date)" +
+			" VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
 	static final String CREATE_OBJECT = CREATE_TABLE + Repository.TABLE_OBJECT + " (" +
-		"object_id   INTEGER      AUTO_INCREMENT, " +
-		"source_id   INTEGER      NOT NULL, " +
-		"accession   VARCHAR(250) BINARY NOT NULL, " +
-		"name		 LONG VARCHAR NULL, " +
-		"type        VARCHAR(100) NULL, " +
-		"typespace   VARCHAR(100) NULL, " +
-		"kind        INTEGER NULL, " +
-		"comment     LONG VARCHAR NULL, " +
-		"synonyms    VARCHAR(500) NULL, " +
-		"PRIMARY KEY(object_id), " + // thus also unique
-		"UNIQUE(source_id, accession, kind), " +
-		"INDEX(source_id), INDEX(accession))  ENGINE = MYISAM";
+			"object_id   INTEGER      AUTO_INCREMENT, " +
+			"source_id   INTEGER      NOT NULL, " +
+			//"accession   VARCHAR(250) BINARY NOT NULL, " +
+			"accession   VARCHAR(250) NOT NULL, " +
+			"name      LONG VARCHAR NULL, " +
+			"type        VARCHAR(100) NULL, " +
+			"typespace   VARCHAR(100) NULL, " +
+			"kind        INTEGER NULL, " +
+			"comment     LONG VARCHAR NULL, " +
+			"synonyms    VARCHAR(500) NULL, " +
+			"PRIMARY KEY(object_id), " + // thus also unique
+			"UNIQUE(source_id, accession, kind))";
+	//"INDEX(source_id), INDEX(accession))";
+	static final String CREATE_INDEX_OBJECT_SOURCE_ID = "CREATE INDEX IF NOT EXISTS index_source_id ON " + Repository.TABLE_OBJECT + "(source_id)";
+	static final String CREATE_INDEX_OBJECT_ACCESSION = "CREATE INDEX IF NOT EXISTS index_accession ON " + Repository.TABLE_OBJECT + "(accession)";
 	static final String DROP_OBJECT = DROP_TABLE + Repository.TABLE_OBJECT ;
-	static final String INSERT_OBJECT = INSERT_INTO + Repository.TABLE_OBJECT + 
-		"(source_id, accession, name, type, typespace, kind, comment, synonyms) " +
-		"VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
-
+	static final String INSERT_OBJECT = INSERT_INTO + Repository.TABLE_OBJECT +
+			"(source_id, accession, name, type, typespace, kind, comment, synonyms) " +
+			"VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
 	static final String CREATE_OBJECT_REL = CREATE_TABLE + Repository.TABLE_OBJECT_REL + " (" +
-		"sourcerel_id INTEGER      NOT NULL, " +
-		"object1_id   INTEGER      NOT NULL, " +
-		"object2_id   INTEGER      NOT NULL, " +
-		"similarity   FLOAT		   NULL, " +
-		"type         VARCHAR(50)  NULL, " +
-		"UNIQUE(sourcerel_id, object1_id, object2_id), " +
-		"INDEX(sourcerel_id), INDEX(object1_id), INDEX(object2_id))  ENGINE = MYISAM";
+			"sourcerel_id INTEGER      NOT NULL, " +
+			"object1_id   INTEGER      NOT NULL, " +
+			"object2_id   INTEGER      NOT NULL, " +
+			"similarity   FLOAT          NULL, " +
+			"type         VARCHAR(50)  NULL, " +
+			"UNIQUE(sourcerel_id, object1_id, object2_id)) ";
+	//"INDEX(sourcerel_id), INDEX(object1_id), INDEX(object2_id))";
+	static final String CREATE_INDEX_OBJECT_SOURCEREL_ID = "CREATE INDEX IF NOT EXISTS index_sourcerel_id ON " + Repository.TABLE_OBJECT_REL + "(sourcerel_id)";
+	static final String CREATE_INDEX_OBJECT_OBJECT1_ID = "CREATE INDEX IF NOT EXISTS index_object1_id ON " + Repository.TABLE_OBJECT_REL + "(object1_id)";
+	static final String CREATE_INDEX_OBJECT_OBJECT2_ID = "CREATE INDEX IF NOT EXISTS index_object2_id ON " + Repository.TABLE_OBJECT_REL + "(object2_id)";
 	static final String DROP_OBJECT_REL = DROP_TABLE + Repository.TABLE_OBJECT_REL;
 	static final String INSERT_OBJECT_REL = INSERT_INTO + Repository.TABLE_OBJECT_REL +
-		"(sourcerel_id, object1_id, object2_id, similarity, type)" +
-		" VALUES(?, ?, ?, ?, ?)";
-  
-
-	static final String CREATE_WORKFLOW = CREATE_TABLE + Repository.TABLE_WORKFLOW + " (" +	 
-		"name       VARCHAR(100)  BINARY NOT NULL, " +
-		"value      LONG VARCHAR  NULL, " +
-		"PRIMARY KEY(name))  ENGINE = MYISAM";
+			"(sourcerel_id, object1_id, object2_id, similarity, type)" +
+			" VALUES(?, ?, ?, ?, ?)";
+	static final String CREATE_WORKFLOW = CREATE_TABLE + Repository.TABLE_WORKFLOW + " (" +
+			//"name       VARCHAR(100)  BINARY NOT NULL, " +
+			"name       VARCHAR(100)  NOT NULL, " +
+			"value      LONG VARCHAR  NULL, " +
+			"PRIMARY KEY(name))  ";
 	static final String DROP_WORKFLOW = DROP_TABLE + Repository.TABLE_WORKFLOW;
 	static final String INSERT_WORKFLOW = INSERT_INTO + Repository.TABLE_WORKFLOW +
-		"(name, value)" +
-		" VALUES (?, ?)";
-
-	
-	  static final String[] CREATE_QUERIES = {
-		  CREATE_SOURCE, CREATE_SOURCE_REL, CREATE_OBJECT,CREATE_OBJECT_REL, 
-		  CREATE_WORKFLOW
-	  };
-	
-	  static final String[] DROP_QUERIES = {
-		  DROP_SOURCE, DROP_SOURCE_REL, DROP_OBJECT, DROP_OBJECT_REL,
-		  DROP_WORKFLOW
-	  };
-	  
-	  static final String createInstancesQuery1 = CREATE_TABLE + Repository.TABLE_INSTANCES;
-	  static final String createInstancesQuery2 =" (" +
-	  "id          INTEGER AUTO_INCREMENT, " +  // will be used to reference the instance values
-	  "connect  	 LONG VARCHAR NULL, " +
-	  "elementid   INTEGER NOT NULL, " +
-	  "instance_id INTEGER NOT NULL, " +
-	  "attribute   VARCHAR(100) NULL, " +
-	  "value       LONG VARCHAR NOT NULL, " +
-	  "PRIMARY KEY(id)," +
-	  "INDEX(elementid))  ENGINE = MYISAM"; //, " +
-	  //"UNIQUE (name))";
-	  static final String insertInstancesQuery1 = INSERT_INTO + Repository.TABLE_INSTANCES ;
-	  static final String insertInstancesQuery2 = " (connect, elementid, instance_id, attribute, value) VALUES (?, ?, ?, ?, ?)";
-	  static final String updateInstancesQuery1 = UPDATE + Repository.TABLE_INSTANCES ;
-	  static final String updateInstancesQuery2 = " SET instance_id=? WHERE id=?";
-
-	
-}
+			"(name, value)" +
+			" VALUES (?, ?)";
+	static final String[] CREATE_QUERIES = {
+			CREATE_SOURCE, CREATE_SOURCE_REL, CREATE_OBJECT,CREATE_OBJECT_REL,
+			CREATE_WORKFLOW
+	};
+	static final String[] DROP_QUERIES = {
+			DROP_SOURCE, DROP_SOURCE_REL, DROP_OBJECT, DROP_OBJECT_REL,
+			DROP_WORKFLOW
+	};
+	static final String createInstancesQuery1 = CREATE_TABLE + Repository.TABLE_INSTANCES;
+	static final String createInstancesQuery2 =" (" +
+			"id          INTEGER AUTO_INCREMENT, " +  // will be used to reference the instance values
+			"connect      LONG VARCHAR NULL, " +
+			"elementid   INTEGER NOT NULL, " +
+			"instance_id INTEGER NOT NULL, " +
+			"attribute   VARCHAR(100) NULL, " +
+			"value       LONG VARCHAR NOT NULL, " +
+			"PRIMARY KEY(id))";
+	//"INDEX(elementid))"; //, " +
+	//"UNIQUE (name))";
+	static final String CREATE_INDEX_OBJECT_ELEMENT_ID = "CREATE INDEX IF NOT EXISTS index_element_id ON " + Repository.TABLE_INSTANCES;
+	static final String CREATE_INDEX_OBJECT_ELEMENT_ID2 = "(elementid)";
+	static final String insertInstancesQuery1 = INSERT_INTO + Repository.TABLE_INSTANCES ;
+	static final String insertInstancesQuery2 = " (connect, elementid, instance_id, attribute, value) VALUES (?, ?, ?, ?, ?)";
+	static final String updateInstancesQuery1 = UPDATE + Repository.TABLE_INSTANCES ;
+	static final String updateInstancesQuery2 = " SET instance_id=? WHERE id=?";
+	static final String[] CREATE_INDEX_QUERIES = {
+			CREATE_INDEX_OBJECT_ACCESSION, CREATE_INDEX_OBJECT_SOURCE_ID, CREATE_INDEX_OBJECT_SOURCEREL_ID,
+			CREATE_INDEX_OBJECT_OBJECT1_ID, CREATE_INDEX_OBJECT_OBJECT2_ID
+	};
+}
\ No newline at end of file
diff -ruN coma-project/coma-engine/src/main/java/de/wdilab/coma/repository/Repository.java coma-project-final/coma-engine/src/main/java/de/wdilab/coma/repository/Repository.java
--- coma-project/coma-engine/src/main/java/de/wdilab/coma/repository/Repository.java	2020-02-28 16:51:35.061159000 +0100
+++ coma-project-final/coma-engine/src/main/java/de/wdilab/coma/repository/Repository.java	2020-02-14 02:21:07.000000000 +0100
@@ -35,15 +35,15 @@
 
 /**
  * Repository contains function to create and delete the whole repository (=several tables)
- * and to insert or retrieve basic information. For more detailed reading access DataAccess 
- * is used and for writing acces DataImport. 
- * 
+ * and to insert or retrieve basic information. For more detailed reading access DataAccess
+ * is used and for writing acces DataImport.
+ *
  * @author Hong Hai Do, Sabine Massmann
  */
 public class Repository {
 	// static
-	public static final String DB_MYSQL_DRIVER = "com.mysql.jdbc.Driver";
-	
+	public static final String DB_MYSQL_DRIVER = "org.sqlite.JDBC";
+
 	// Status of import
 	public static final String STATUS_IMPORT_STARTED = "IMPORT_STARTED";
 	public static final String STATUS_IMPORT_DONE = "IMPORT_DONE";
@@ -54,50 +54,55 @@
 	static final String TABLE_OBJECT_REL = "object_rel";
 	static final String TABLE_WORKFLOW = "workflow";
 	static final String TABLE_INSTANCES = "instances_";
-	
+
 	public static final String SRC_ABBREV = "ABBREVIATION";
 	public static final String SRC_SYNONYM = "SYNONYM";
-	
+
 	static final int UNDEF = -1;
-	
+
 	static public final int INSTANCES_MAX_PER_ELEMENT = 1000;
-	
+
 	// non-static
-	Connection connection = null;
-	Statement statement = null;
+	static Connection connection = null;
+	static Statement statement = null;
 
 	boolean queryStatus = true;
 	String queryMessage = null;
-	
+
 	//
 	PreparedStatement insertSourcePstmt, insertSourceRelPstmt,
 			insertObjectPstmt, insertObjectRelPstmt, insertWorkflowPstmt,
-            // Instances
-            insertInstancesPstmt,updateInstancesPstmt;
+	// Instances
+	insertInstancesPstmt,updateInstancesPstmt;
 
 	public Repository() {
-		connectToDatabase();
+		if (connection == null) {
+			connectToDatabase();
+			createRepositorySchema();
+		}
 	}
 
 	public Repository(Connection connection) {
-		this.connection = connection;
-		connectToDatabase();
+		if (Repository.connection == null) {
+			connection = connection;
+			connectToDatabase();
+			createRepositorySchema();
+		}
 	}
-	
+
 	public void connectToDatabase() {
 		try {
 			if ((connection == null || (connection!=null && connection.isClosed()))
 					&&  statement == null ) {
-					Class.forName(DB_MYSQL_DRIVER);
-					// connection = DriverManager.getConnection(DB_MYSQL_URL,
-					// DB_USER, DB_PASSWORD);
-					if (System.getProperty("comaUrl")!=null){
-						connection = DriverManager.getConnection(
-								System.getProperty("comaUrl"),
-								System.getProperty("comaUser"),
-								System.getProperty("comaPwd"));
-						statement = connection.createStatement();
-					}
+				Class.forName(DB_MYSQL_DRIVER);
+				// connection = DriverManager.getConnection(DB_MYSQL_URL,
+				// DB_USER, DB_PASSWORD);
+//				if (System.getProperty("comaUrl")!=null){
+//					System.out.println("connectToDatabase() with url " + System.getProperty("comaUrl") + ", connection: " + connection + ", statement: " + statement);
+					connection = DriverManager.getConnection(
+							"jdbc:sqlite::memory:");
+					statement = connection.createStatement();
+//				}
 			} else if (connection != null &&  statement == null){
 				statement = connection.createStatement();
 			}
@@ -105,38 +110,51 @@
 			System.out.println("connectToDatabase(): " + e.getMessage());
 		} catch (Exception e) {
 			System.out.println("connectToDatabase(): " + e.getMessage());
-            e.printStackTrace();
+			e.printStackTrace();
+		}
+	}
+
+	public void disconnectFromDatabase(){
+		try {
+			connection.close();
+		} catch (SQLException e) {
+			System.out.println("disconnectFromDatabase(): " + e.getMessage());
 		}
 	}
 
 	public Connection getConnection(){
 		return connection;
 	}
-	
+
 	public void closeDatabaseConnection() {
 		try {
-			if (statement != null)
+			System.out.println("closeDatabaseConnection(): connection: " + connection + ", statement: " + statement);
+			if (statement != null) {
 				statement.close();
-			if (connection != null)
+				statement = null;
+			}
+			if (connection != null) {
 				connection.close();
+				connection = null;
+			}
 		} catch (SQLException e) {
 			System.out.println("closeDatabaseConnection()" + e.getMessage());
 		}
 	}
-	
+
 	public void executeQuery(String query, boolean verbose) {
-		    //System.out.println("Executing query: " + query);
+		//System.out.println("Executing query: " + query);
 		queryStatus = true;
 		if (query!=null) {
 			try { statement.execute(query); }
 			catch(SQLException e) {
 				queryStatus = false;
-		        queryMessage = e.getMessage();
-		        if (verbose) System.out.println("executeQuery(): " + query + " with ERROR " + queryMessage);
+				queryMessage = e.getMessage();
+				if (verbose) System.out.println("executeQuery(): " + query + " with ERROR " + queryMessage);
 			}
 		}
 	}
-	
+
 	public void executeQuery(String query) {
 		executeQuery(query, true);
 	}
@@ -148,34 +166,41 @@
 			if (! queryStatus) break;
 		}
 	}
-	
+
 	public void executeBatch(String[] queries) {
 		executeBatch(queries, true);
 	}
-	
-	
+
+
 	public void createRepositorySchema() {
 		for (int i=0; i<MySQL.CREATE_QUERIES.length; i++){
 			executeQuery(MySQL.CREATE_QUERIES[i]);
+			System.out.println(MySQL.CREATE_QUERIES[i]);
+		}
+
+		for (int i=0; i<MySQL.CREATE_INDEX_QUERIES.length; i++){
+			executeQuery(MySQL.CREATE_INDEX_QUERIES[i]);
+			System.out.println(MySQL.CREATE_INDEX_QUERIES[i]);
 		}
 	}
-	
+
 	public void createInstancesTable(int id){
 		System.out.print("Create new instances schema ("+id+") ... ");
 		String query = MySQL.createInstancesQuery1 + id + MySQL.createInstancesQuery2;
-		executeQuery(query);	  
+		executeQuery(query);
+		executeQuery(MySQL.CREATE_INDEX_OBJECT_ELEMENT_ID + id + MySQL.CREATE_INDEX_OBJECT_ELEMENT_ID2);
 	}
-	
+
 	public void dropRepositorySchema() {
 		for (int i=0; i<MySQL.DROP_QUERIES.length; i++){
 			executeQuery(MySQL.DROP_QUERIES[i]);
 		}
 
 		deleteMatchResultDBs();
-		
+
 		deleteInstanceTables();
 	}
-	
+
 	public void emptyWorkflow() {
 		executeQuery("TRUNCATE " + TABLE_WORKFLOW);
 	}
@@ -187,10 +212,10 @@
 	String getLastQueryMessage() {
 		return queryMessage;
 	}
-	
-	
-	  public void prepareInstancesStatement(int id){
-		  try {
+
+
+	public void prepareInstancesStatement(int id){
+		try {
 			insertInstancesPstmt = connection.prepareStatement(
 					MySQL.insertInstancesQuery1 + id + MySQL.insertInstancesQuery2,Statement.RETURN_GENERATED_KEYS);
 			updateInstancesPstmt = connection.prepareStatement(
@@ -198,798 +223,797 @@
 		} catch (SQLException e) {
 			System.out.println("Repository.prepareInstancesStatement: SQLException");
 		}
-	  }
-	  
-	  public void closeInstancesStatement(){
-		  try {
+	}
+
+	public void closeInstancesStatement(){
+		try {
 			insertInstancesPstmt.close();
 			updateInstancesPstmt.close();
 		} catch (SQLException e) {
 			System.out.println("Repository.prepareInstancesStatement: SQLException");
 		}
-	  }
-	  //--------------------------------------------------------------------------//
-	  // Retrieval routines                                                       //
-	  //--------------------------------------------------------------------------//
-	  
-	  
-	  // assumption:  only one source has this name and provider!!!
-	  public int getSourceId(String sourceName, String provider) {
-		    int id = Source.UNDEF;
-		    String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + 
-		    	" WHERE name='" + sourceName + "' AND provider='"+ provider + "' ";
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      if (rs.next()){
-		        id = rs.getInt(1);
-		      } else {   // url instead of provider
-		    	  query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + 
-			    	" WHERE name='" + sourceName + "' AND url LIKE '%"+ provider + "%'";
-		    	  rs = statement.executeQuery(query);
-		    	  if (rs.next()){
-				        id = rs.getInt(1);
-		    	  } else {   // only name
-			    	  query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + 
-				    	" WHERE name='" + sourceName + "'";
-			    	  rs = statement.executeQuery(query);
-			    	  if (rs.next()){ // take first source
-					        id = rs.getInt(1);
-			    	  }
-			      }
-		      }
-		    }
-		    catch (SQLException e) {
-		      System.out.println("getSourceId(): " + e.getMessage());
-		    }
-		    return id;
-	  }
-	  
-	  // assumption:  only one source has this provider!!!
-	  public int getSourceId(String provider) {
-		    int id = Source.UNDEF;
-		    String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + 
-		    	" WHERE provider='"+ provider + "' ";
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      if (rs.next())
-		        id = rs.getInt(1);
-		    }
-		    catch (SQLException e) {
-		      System.out.println("getSourceId(): " + e.getMessage());
-		    }
-		    return id;
-	  }
-	  
-
-	  public int getSourceRelId(int source1Id, int source2Id, int type, String name) {
-	    int id = SourceRelationship.UNDEF;
-	    String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
-	        "WHERE source1_id=" + source1Id + " AND source2_id=" + source2Id;
-	    if (name!=null){
-	    	query += " AND name='" + name + "'";
-	    }
-	    try {
-	      ResultSet rs = statement.executeQuery(query);
-	      if (rs.next()) id = rs.getInt(1);
-	    }
-	    catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
-	    return id;
-	  }
-	  
-	  public HashSet<Integer> getSourceRelId(int sourceId) {
-		  if (sourceId==Source.UNDEF){
-			  return null;
-		  }
-		  HashSet<Integer> list = new HashSet<Integer>();
-		    String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
-		        "WHERE (source1_id=" + sourceId + " OR source2_id=" + sourceId + ") AND status='"+STATUS_IMPORT_DONE+"'";
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      while (rs.next()){
-		    	  int id = rs.getInt(1);
-		    	  list.add(id);
-		      }
-		      if (list.isEmpty()) return null;
-		    }
-		    catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
-		    return list;
-	  }
-	  
-	  public Integer getSuperSource(int sourceId) {
-		  ArrayList<Integer> source_ids = getSource1Id(sourceId, SourceRelationship.REL_CONTAINS);
-		  
-		    if (source_ids==null) return UNDEF;
-		    
-		    
-		    ArrayList<Integer> undef = getSourceID_Undef();
-		    if (undef!=null){
-		    	source_ids.removeAll(undef);
-		    	if (source_ids.isEmpty()) return UNDEF;
-		    }
-		    
-		    if (source_ids.size()>1){
-		    	System.out.println("only one super source expected");
-		    }
-		    return source_ids.get(0);
-	  }
-	  
-	  public ArrayList<Integer> getSubSources(int sourceId) {
-		  return getSource2Id(sourceId, SourceRelationship.REL_CONTAINS);
-	  }
-	  
-	  
-	  public ArrayList<Integer> getSource2Id(int sourceId1, int sourcerel_type) {
-		  if (sourceId1==Source.UNDEF){
-			  return null;
-		  }
-		  ArrayList<Integer> list = new ArrayList<Integer>();
-		  String query = MySQL.SELECT +"source2_id FROM " + TABLE_SOURCE_REL + " " +
-		  "WHERE source1_id=" + sourceId1 + " AND type="+sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  while (rs.next()){
-				  int id = rs.getInt(1);
-				  list.add(id);
-			  }
-			  if (list.isEmpty()) return null;
-		  }
-		  catch (SQLException e) { System.out.println("getSource2Id(): " + e.getMessage());  }
-		  return list;
-	  }
-	  
-	  public ArrayList<Integer> getSource1Id(int sourceId2, int sourcerel_type) {
-		  if (sourceId2==Source.UNDEF){
-			  return null;
-		  }
-		  ArrayList<Integer> list = new ArrayList<Integer>();
-		  String query = MySQL.SELECT +"source1_id FROM " + TABLE_SOURCE_REL + " " +
-		  "WHERE source2_id=" + sourceId2 + " AND type="+ sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  while (rs.next()){
-				  int id = rs.getInt(1);
-				  list.add(id);
-			  }
-			  if (list.isEmpty()) return null;
-		  }
-		  
-		  catch (SQLException e) { System.out.println("getSource2Id(): " + e.getMessage());  }
-		  return list;
-	  }
-	  
-	  public ArrayList<Integer> getSourceID_Undef() {
-		  ArrayList<Integer> list = new ArrayList<Integer>();
-		  String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " " +
-		  "WHERE type='"+Source.typeToString(-1)+"'";
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  while (rs.next()){
-				  int id = rs.getInt(1);
-				  list.add(id);
-			  }
-			  if (list.isEmpty()) return null;
-		  }
-		  
-		  catch (SQLException e) { System.out.println("getSource2Id(): " + e.getMessage());  }
-		  return list;
-	  }
-	  
-	  public ArrayList<Integer> getSourceIdsWithUrl(String url) {
-		  ArrayList<Integer> list = new ArrayList<Integer>();
-		  String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " WHERE  status='"+STATUS_IMPORT_DONE+"' AND ";
-		  if (url==null){
-			  query += "url IS NULL";
-		  } else {
+	}
+	//--------------------------------------------------------------------------//
+	// Retrieval routines                                                       //
+	//--------------------------------------------------------------------------//
+
+
+	// assumption:  only one source has this name and provider!!!
+	public int getSourceId(String sourceName, String provider) {
+		int id = Source.UNDEF;
+		String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE +
+				" WHERE name='" + sourceName + "' AND provider='"+ provider + "' ";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()){
+				id = rs.getInt(1);
+			} else {   // url instead of provider
+				query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE +
+						" WHERE name='" + sourceName + "' AND url LIKE '%"+ provider + "%'";
+				rs = statement.executeQuery(query);
+				if (rs.next()){
+					id = rs.getInt(1);
+				} else {   // only name
+					query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE +
+							" WHERE name='" + sourceName + "'";
+					rs = statement.executeQuery(query);
+					if (rs.next()){ // take first source
+						id = rs.getInt(1);
+					}
+				}
+			}
+		}
+		catch (SQLException e) {
+			System.out.println("getSourceId(): " + e.getMessage());
+		}
+		return id;
+	}
+
+	// assumption:  only one source has this provider!!!
+	public int getSourceId(String provider) {
+		int id = Source.UNDEF;
+		String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE +
+				" WHERE provider='"+ provider + "' ";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next())
+				id = rs.getInt(1);
+		}
+		catch (SQLException e) {
+			System.out.println("getSourceId(): " + e.getMessage());
+		}
+		return id;
+	}
+
+
+	public int getSourceRelId(int source1Id, int source2Id, int type, String name) {
+		int id = SourceRelationship.UNDEF;
+		String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE source1_id=" + source1Id + " AND source2_id=" + source2Id;
+		if (name!=null){
+			query += " AND name='" + name + "'";
+		}
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()) id = rs.getInt(1);
+		}
+		catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
+		return id;
+	}
+
+	public HashSet<Integer> getSourceRelId(int sourceId) {
+		if (sourceId==Source.UNDEF){
+			return null;
+		}
+		HashSet<Integer> list = new HashSet<Integer>();
+		String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE (source1_id=" + sourceId + " OR source2_id=" + sourceId + ") AND status='"+STATUS_IMPORT_DONE+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				int id = rs.getInt(1);
+				list.add(id);
+			}
+			if (list.isEmpty()) return null;
+		}
+		catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
+		return list;
+	}
+
+	public Integer getSuperSource(int sourceId) {
+		ArrayList<Integer> source_ids = getSource1Id(sourceId, SourceRelationship.REL_CONTAINS);
+
+		if (source_ids==null) return UNDEF;
+
+
+		ArrayList<Integer> undef = getSourceID_Undef();
+		if (undef!=null){
+			source_ids.removeAll(undef);
+			if (source_ids.isEmpty()) return UNDEF;
+		}
+
+		if (source_ids.size()>1){
+			System.out.println("only one super source expected");
+		}
+		return source_ids.get(0);
+	}
+
+	public ArrayList<Integer> getSubSources(int sourceId) {
+		return getSource2Id(sourceId, SourceRelationship.REL_CONTAINS);
+	}
+
+
+	public ArrayList<Integer> getSource2Id(int sourceId1, int sourcerel_type) {
+		if (sourceId1==Source.UNDEF){
+			return null;
+		}
+		ArrayList<Integer> list = new ArrayList<Integer>();
+		String query = MySQL.SELECT +"source2_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE source1_id=" + sourceId1 + " AND type="+sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				int id = rs.getInt(1);
+				list.add(id);
+			}
+			if (list.isEmpty()) return null;
+		}
+		catch (SQLException e) { System.out.println("getSource2Id(): " + e.getMessage());  }
+		return list;
+	}
+
+	public ArrayList<Integer> getSource1Id(int sourceId2, int sourcerel_type) {
+		if (sourceId2==Source.UNDEF){
+			return null;
+		}
+		ArrayList<Integer> list = new ArrayList<Integer>();
+		String query = MySQL.SELECT +"source1_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE source2_id=" + sourceId2 + " AND type="+ sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				int id = rs.getInt(1);
+				list.add(id);
+			}
+			if (list.isEmpty()) return null;
+		}
+
+		catch (SQLException e) { System.out.println("getSource2Id(): " + e.getMessage());  }
+		return list;
+	}
+
+	public ArrayList<Integer> getSourceID_Undef() {
+		ArrayList<Integer> list = new ArrayList<Integer>();
+		String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " " +
+				"WHERE type='"+Source.typeToString(-1)+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				int id = rs.getInt(1);
+				list.add(id);
+			}
+			if (list.isEmpty()) return null;
+		}
+
+		catch (SQLException e) { System.out.println("getSource2Id(): " + e.getMessage());  }
+		return list;
+	}
+
+	public ArrayList<Integer> getSourceIdsWithUrl(String url) {
+		ArrayList<Integer> list = new ArrayList<Integer>();
+		String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " WHERE  status='"+STATUS_IMPORT_DONE+"' AND ";
+		if (url==null){
+			query += "url IS NULL";
+		} else {
 			//in case source contains multiple namespaces
-			  query += "url LIKE '%"+url+"%'";
-		  }
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  while (rs.next()){
-				  int id = rs.getInt(1);
-				  list.add(id);
-			  }
-			  if (list.isEmpty()) return null;
-		  }
-		  catch (SQLException e) { System.out.println("getSourcesWithUrl(): " + e.getMessage());  }
-		  return list;
-	  }
-	  
-	  public ArrayList<Integer> getSourceIdsWithProvider(String provider) {
-		  ArrayList<Integer> list = new ArrayList<Integer>();
-		  String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " WHERE  status='"+STATUS_IMPORT_DONE+"' AND ";
-		  if (provider==null){
-			  query += "provider IS NULL";
-		  } else {
+			query += "url LIKE '%"+url+"%'";
+		}
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				int id = rs.getInt(1);
+				list.add(id);
+			}
+			if (list.isEmpty()) return null;
+		}
+		catch (SQLException e) { System.out.println("getSourcesWithUrl(): " + e.getMessage());  }
+		return list;
+	}
+
+	public ArrayList<Integer> getSourceIdsWithProvider(String provider) {
+		ArrayList<Integer> list = new ArrayList<Integer>();
+		String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " WHERE  status='"+STATUS_IMPORT_DONE+"' AND ";
+		if (provider==null){
+			query += "provider IS NULL";
+		} else {
 			//in case source contains multiple namespaces
-			  query += "provider='"+provider+"'";
-		  }
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  while (rs.next()){
-				  int id = rs.getInt(1);
-				  list.add(id);
-			  }
-			  if (list.isEmpty()) return null;
-		  }
-		  catch (SQLException e) { System.out.println("getSourceIdsWithProvider(): " + e.getMessage());  }
-		  return list;
-	  }
-	  
-	  public ArrayList<Integer> getSourceIdsWithNameAndUrl(String name, String url) {
-		  ArrayList<Integer> list = new ArrayList<Integer>();
-		  String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " WHERE  status='"+
-		  		STATUS_IMPORT_DONE+"' AND name='"+name+"' AND ";		  
-		  if (url==null){
-			  query += "url IS NULL";
-		  } else {
-			  url = url.replace("\\", "/");
+			query += "provider='"+provider+"'";
+		}
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				int id = rs.getInt(1);
+				list.add(id);
+			}
+			if (list.isEmpty()) return null;
+		}
+		catch (SQLException e) { System.out.println("getSourceIdsWithProvider(): " + e.getMessage());  }
+		return list;
+	}
+
+	public ArrayList<Integer> getSourceIdsWithNameAndUrl(String name, String url) {
+		ArrayList<Integer> list = new ArrayList<Integer>();
+		String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " WHERE  status='"+
+				STATUS_IMPORT_DONE+"' AND name='"+name+"' AND ";
+		if (url==null){
+			query += "url IS NULL";
+		} else {
+			url = url.replace("\\", "/");
 			//in case source contains multiple namespaces
-			  query += "url LIKE '%"+url+"%'";
-		  }
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  while (rs.next()){
-				  int id = rs.getInt(1);
-				  list.add(id);
-			  }
-			  if (list.isEmpty()) return null;
-		  }
-		  catch (SQLException e) { System.out.println("getSourcesWithUrl(): " + e.getMessage());  }
-		  return list;
-	  }
-	  
-	  public ArrayList<Integer> getSourceIdsWithName(String name) {
-		  ArrayList<Integer> list = new ArrayList<Integer>();
-		  String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " WHERE  status='"+
-		  		STATUS_IMPORT_DONE+"' AND name='"+name+"' ";		  
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  while (rs.next()){
-				  int id = rs.getInt(1);
-				  list.add(id);
-			  }
-			  if (list.isEmpty()) return null;
-		  }
-		  catch (SQLException e) { System.out.println("getSourceIdsWithName(): " + e.getMessage());  }
-		  return list;
-	  }
-	  
-	  
-	  public int getSourceRelId_ISA(int sourceId1, int sourceId2) {
-		  if (sourceId1==Source.UNDEF || sourceId2==Source.UNDEF){
-			  return SourceRelationship.UNDEF;
-		  }
-		    String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
-		        "WHERE source1_id=" + sourceId1 + " AND source2_id=" + sourceId2 + " AND type="+
-		        SourceRelationship.REL_IS_A+" AND status='"+STATUS_IMPORT_DONE+"'";
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      if (rs.next()){
-		    	  return rs.getInt(1);
-		      }
-		    }
-		    catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
-		    return SourceRelationship.UNDEF;
-	  }
-	  
-	  public HashSet<Integer> getSourceRelIds(int sourceId1, int sourceId2, int sourcerel_type) {
-		  if (sourceId1==Source.UNDEF || sourceId2==Source.UNDEF){
-			  return null;
-		  }
-		  HashSet<Integer> ids = new HashSet<Integer>();
-		    String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
-		        "WHERE source1_id=" + sourceId1 + " AND source2_id=" + sourceId2 + " AND type="+
-		        sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      while (rs.next()){
-		    	  ids.add(rs.getInt(1));
-		      }
-		    }
-		    catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
-		    if (ids.isEmpty()) return null;
-		    return ids;
-	  }
-	  
-	  public HashMap<Integer,HashSet<Integer>> getSourceRelSourceIds(int sourcerel_type) {
-		  HashMap<Integer,HashSet<Integer>> ids = new HashMap<Integer,HashSet<Integer>>();
-		    String query = MySQL.SELECT +"source1_id, source2_id FROM " + TABLE_SOURCE_REL + " " +
-		        "WHERE type="+sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      while (rs.next()){
-		    	  Integer id1 = rs.getInt(1);
-		    	  HashSet<Integer> id1Rel = ids.get(id1);
-		    	  if (id1Rel==null) id1Rel = new HashSet<Integer>();
-		    	  id1Rel.add( rs.getInt(2));
-		    	  ids.put(id1, id1Rel);
-		      }
-		    }
-		    catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
-		    if (ids.isEmpty()) return null;
-		    return ids;
-	  }
-	  
-	  public HashSet<Integer> getSourceRelIds(int sourcerel_type) {
-		  HashSet<Integer> ids = new HashSet<Integer>();
-		    String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
-		        "WHERE type="+sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      while (rs.next()){
-		    	  Integer id1 = rs.getInt(1);
-		    	  ids.add(id1);
-		      }
-		    }
-		    catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
-		    if (ids.isEmpty()) return null;
-		    return ids;
-	  }
-	  
-	  public int getSourceRelIdWithName(int sourceId1, int sourceId2, String name) {
-		  if (sourceId1==Source.UNDEF || sourceId2==Source.UNDEF){
-			  return SourceRelationship.UNDEF;
-		  }
-		    String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
-		        "WHERE source1_id=" + sourceId1 + " AND source2_id=" + sourceId2 + 
-		        " AND name='"+name+"' AND status='"+STATUS_IMPORT_DONE+"'";
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      if (rs.next()){
-		    	  return rs.getInt(1);
-		      }
-		    }
-		    catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
-		    return SourceRelationship.UNDEF;
-	  }
-	  
-	  
-	  public HashSet<Integer> getSourceRelIds(int sourceId1, int sourceId2) {
-		  if (sourceId1==Source.UNDEF || sourceId2==Source.UNDEF){
-			  return null;
-		  }
-		  HashSet<Integer> relIds = new HashSet<Integer>();
-		    String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
-		        "WHERE ((source1_id=" + sourceId1 + " AND source2_id=" + sourceId2 + ") " +
-		        "OR (source1_id=" + sourceId2 + " AND source2_id=" + sourceId1 + ")) " +
-		        		" AND status='"+STATUS_IMPORT_DONE+"'";
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      while (rs.next()){
-		    	  relIds.add(rs.getInt(1));
-		      }
-		    }
-		    catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
-		    if (relIds.isEmpty()) return null;
-		    return relIds;
-	  }
-	  
-	  
-	  public int getObjectId(int sourceId, String acc, int kind) {
-		  if (sourceId==Source.UNDEF){
-			  return Element.UNDEF;
-		  }
-		  int id = Element.UNDEF;
-		  String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT + 
-		  	" WHERE source_id = " + sourceId + " AND accession = '" + acc + "'" + " AND kind = " + kind;
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  if (rs.next()) id = rs.getInt(1);
-		  }
-		  catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
-		  return id;
-	  }
-	  
-	  public int getObjectIdNotKind(int sourceId, String acc, int kind) {
-		  if (sourceId==Source.UNDEF){
-			  return Element.UNDEF;
-		  }
-		  int id = Element.UNDEF;
-		  String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT + 
-		  	" WHERE source_id = " + sourceId + " AND accession = '" + acc + "'" + " AND kind != " + kind;
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  if (rs.next()) id = rs.getInt(1);
-		  }
-		  catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
-		  return id;
-	  }
-	  
-	  public int getObjectIdEndingNotKind(int sourceId, String acc, int kind) {
-		  if (sourceId==Source.UNDEF){
-			  return Element.UNDEF;
-		  }
-		  int id = Element.UNDEF;
-		  String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT + 
-		  	" WHERE source_id = " + sourceId + " AND accession Like '%" + acc + "'" + " AND kind != " + kind;
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  if (rs.next()) id = rs.getInt(1);
-		  }
-		  catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
-		  return id;
-	  }
-	  
-	  public boolean sourceHasPaths(int sourceId) {
-		  if (sourceId==Source.UNDEF){
-			  return false;
-		  }
-		  String query = MySQL.SELECT +"count(*) FROM " + TABLE_OBJECT + 
-		  	" WHERE source_id = " + sourceId + " AND kind = " + Element.KIND_ELEMPATH;
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  if (rs.next()){
-				  int count = rs.getInt(1);
-				  if (count>0){
-					  return true;
-				  }
-			  }
-		  }
-		  catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
-		  return false;
-	  }
-	  
-	  public HashSet<Integer> getObjectIdEndWithAcc(int sourceId, String acc) {
-		  if (sourceId==Source.UNDEF){
-			  return null;
-		  }
-		  HashSet<Integer> ids = new HashSet<Integer>();
-		  String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT + 
-		  	" WHERE source_id = " + sourceId + " AND accession LIKE '%" + acc + "'";
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-
-			  while (rs.next()){
-				 int id = rs.getInt(1);
-				 ids.add(id);
-			  }
-			  if (ids.isEmpty()) return null;
-		  }
-		  catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
-		  return ids;
-	  }
-	  
-	  public HashSet<Integer> getObjectIds(int sourceId) {
-		  if (sourceId==Source.UNDEF){
-			  return null;
-		  }
-		  HashSet<Integer> ids = new HashSet<Integer>();
-		  String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT + 
-		  	" WHERE source_id = " + sourceId ;
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  while (rs.next()){
-				 int id = rs.getInt(1);
-				 ids.add(id);
-			  }
-			  if (ids.isEmpty()) return null;
-		  }
-		  catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
-		  return ids;
-	  }
-	  
-	  public int getObjectRelCnt(int sourceRelId) {
-		  if (sourceRelId==SourceRelationship.UNDEF){
-			  return 0;
-		  }
-		  int size = 0;
-		  String query = MySQL.SELECT +"COUNT(*) FROM " + TABLE_OBJECT_REL + 
-		  	" WHERE sourcerel_id = " + sourceRelId ;
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  if (rs.next()){
-				 size = rs.getInt(1);
-			  }
-		  }
-		  catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
-		  return size;
-	  }
-	  
-	  public int getSourceRelCount(int sourcerel_id) {
-		  String query = MySQL.SELECT +" count(*) " +
-		  	"FROM " + TABLE_OBJECT_REL + " WHERE sourcerel_id="+sourcerel_id;
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  while (rs.next()){
-				  return rs.getInt(1);
-			  }
-		  }
-		  catch (SQLException e) { System.out.println("getSourceRelCount(): " + e.getMessage());  }
-		  return -1;
-	  }
-	  
-	  public boolean existObjectRel(int sourceRelId, int obj1Id, int obj2Id) {
-		  String query = MySQL.SELECT +"* FROM " + TABLE_OBJECT_REL + 
-		  	" WHERE sourcerel_id = " + sourceRelId + " AND object1_id = " + obj1Id + " AND object2_id = " + obj2Id ;
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  if (rs.next()) return true;
-		  }
-		  catch (SQLException e) { System.out.println("existObjectRel(): " + e.getMessage());  }
-		  return false;
-	  }	  
-	  
-	  public boolean existWorkflowVariable(String name) {
-		  String query = MySQL.SELECT +"* FROM " + TABLE_WORKFLOW + 
-		  	" WHERE name = '" + name + "'" ;
-		  try {
-			  ResultSet rs = statement.executeQuery(query);
-			  if (rs.next()) return true;
-		  }
-		  catch (SQLException e) { System.out.println("existObjectRel(): " + e.getMessage());  }
-		  return false;
-	  }	  
-	  
-	  public HashSet<Source> getSources() {
-		    String query = MySQL.SELECT +"* FROM " + TABLE_SOURCE + " WHERE status='"+STATUS_IMPORT_DONE+"'";
-		    HashSet<Source> sources = new HashSet<Source>();
-		    try {
-		      ResultSet rs = statement.executeQuery(query);
-		      while (rs.next()) {
-		        int id = rs.getInt("source_id");
-		        String name = rs.getString("name");
-		        String type = rs.getString("type");
-		        String url = rs.getString("url");
-		        String provider = rs.getString("provider");
-		        String date = rs.getString("date");
-		        // additional: author, domain, version
-		        String author = rs.getString("author");
-		        String domain = rs.getString("domain");
-		        String version = rs.getString("version");
-		        String comment = rs.getString("comment");
-		        Source source = new Source(id, name, type, url, provider, date, author, domain, version, comment);
-		        sources.add(source);
-		      }
-		    }
-		    catch (SQLException e) { 
-		    	System.out.println("getSources(): " + e.getMessage()); 
-		    	if (e.getMessage().contains("doesn't exist")){
-		    		createRepositorySchema();
-		    		System.out.println("create repository schema");
-		    	}
-		    }
-		    if (sources.isEmpty()) return null;
-		    return sources;
-		  }
-	  
-	  
-		/**
-		 * @return SourceRelationship (all existing)
-		 */
-		public HashSet<SourceRelationship> getSourceRels() {
-			HashSet<SourceRelationship> sourceRels = new HashSet<SourceRelationship>();
-
-			String query = MySQL.SELECT +"* FROM " + TABLE_SOURCE_REL;
-			try {
-				ResultSet rs = statement.executeQuery(query);
-				while (rs.next()) {
-					int sourcerel_id = rs.getInt("sourcerel_id");
-					int source1Id = rs.getInt("source1_id");
-					int source2Id = rs.getInt("source2_id");
-					int type = rs.getInt("type");
-					String name = rs.getString("name");
-					String comment = rs.getString("comment");
-					String provider = rs.getString("provider");
-					int preprocessing = rs.getInt("preprocessing");
-					String date = rs.getString("date");
-					String status = rs.getString("status");
-					SourceRelationship sourcerel = new SourceRelationship(sourcerel_id, source1Id, source2Id,
-							type, name, comment, provider, preprocessing, date, status);	
-					sourceRels.add(sourcerel);
-				}
+			query += "url LIKE '%"+url+"%'";
+		}
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				int id = rs.getInt(1);
+				list.add(id);
 			}
-			catch (SQLException e) { 
-				System.out.println("getSourceRelationship(): " + e.getMessage()); 
+			if (list.isEmpty()) return null;
+		}
+		catch (SQLException e) { System.out.println("getSourcesWithUrl(): " + e.getMessage());  }
+		return list;
+	}
+
+	public ArrayList<Integer> getSourceIdsWithName(String name) {
+		ArrayList<Integer> list = new ArrayList<Integer>();
+		String query = MySQL.SELECT +"source_id FROM " + TABLE_SOURCE + " WHERE  status='"+
+				STATUS_IMPORT_DONE+"' AND name='"+name+"' ";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				int id = rs.getInt(1);
+				list.add(id);
 			}
-		    if (sourceRels.isEmpty()) return null;
-			return sourceRels;
+			if (list.isEmpty()) return null;
 		}
-	  
-	  public String toSQLString(List list) {
-		  if (list==null || list.isEmpty()) return null;
-		  StringBuffer sb = new StringBuffer();
-		  int listSize = list.size();
-		  sb.append("(");
-		  for (int i=0; i<listSize-1; i++){
-			  sb.append("'").append(list.get(i)).append("',");
-		  }
-		  sb.append("'").append(list.get(listSize-1)).append("')");
-		  return sb.toString();
-	  }
-	  
-	  public String intToSQLString(List<Integer> list) {
-		  if (list==null || list.isEmpty()) return null;
-		  StringBuffer sb = new StringBuffer();
-		  int listSize = list.size();
-		  sb.append("(");
-		  for (int i=0; i<listSize-1; i++){
-			  sb.append(list.get(i)).append(",");
-		  }
-		  sb.append(list.get(listSize-1)).append(")");
-		  return sb.toString();
-	  }
-	  
-	  public String toSQLString(Set list) {
-		  if (list==null || list.isEmpty()) return null;
-		  StringBuffer sb = new StringBuffer();
-		  sb.append("(");
-		  for (Object object : list) {
-			  sb.append("'").append(object).append("',");
-		  }
-		  sb.deleteCharAt(sb.lastIndexOf(","));
-		  sb.append(")");
-		  return sb.toString();
-	  }
-
-	  public String toSQLIDString(Set<Element> list) {
-		  if (list==null || list.isEmpty()) return null;
-		  StringBuffer sb = new StringBuffer();
-		  sb.append("(");
-		  for (Element element : list) {
-			  sb.append("'").append(element.getId()).append("',");
-		  }
-		  sb.deleteCharAt(sb.lastIndexOf(","));
-		  sb.append(")");
-		  return sb.toString();
-	  }
-	  
-	  public boolean isInstancesTableEmpty(int id){
-//		    System.out.print("Is Instance table  ("+id+") ? ");
-		    String query = MySQL.SELECT + " * FROM " + TABLE_INSTANCES + id;
-			ResultSet resultSet;
-			try {
-				resultSet = statement.executeQuery(query);
-				if  (resultSet.next()) {
-			    	return false;
-			    }
-			} catch (SQLException e) {
-				System.out.println("Repository.existInstanceTable: SQLException");
-			}    
-			return true;
-	  }
-	  
-	  public boolean existInstancesTable(int id){
-		    String database = System.getProperty("comaUrl");
-		    if (database.indexOf("?")>-1){
-		    	database = database.substring(0,database.indexOf("?"));
-		    }
-		    database=database.substring(database.lastIndexOf("/")+1);
-		    String query = MySQL.SELECT + "* FROM " + MySQL.INFO_TABLE + " WHERE table_schema='"+database
-		    +"' AND table_name='"+TABLE_INSTANCES+id+"'";
-//		    executeQuery(query);	    
-			ResultSet resultSet;
-			try {
-				resultSet = statement.executeQuery(query);
-				if  (resultSet.next()) {
-			    	return true;
-			    }
-			} catch (SQLException e) {
-				System.out.println("Repository.existInstanceTable: SQLException");
-			}  
+		catch (SQLException e) { System.out.println("getSourceIdsWithName(): " + e.getMessage());  }
+		return list;
+	}
+
+
+	public int getSourceRelId_ISA(int sourceId1, int sourceId2) {
+		if (sourceId1==Source.UNDEF || sourceId2==Source.UNDEF){
+			return SourceRelationship.UNDEF;
+		}
+		String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE source1_id=" + sourceId1 + " AND source2_id=" + sourceId2 + " AND type="+
+				SourceRelationship.REL_IS_A+" AND status='"+STATUS_IMPORT_DONE+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()){
+				return rs.getInt(1);
+			}
+		}
+		catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
+		return SourceRelationship.UNDEF;
+	}
+
+	public HashSet<Integer> getSourceRelIds(int sourceId1, int sourceId2, int sourcerel_type) {
+		if (sourceId1==Source.UNDEF || sourceId2==Source.UNDEF){
+			return null;
+		}
+		HashSet<Integer> ids = new HashSet<Integer>();
+		String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE source1_id=" + sourceId1 + " AND source2_id=" + sourceId2 + " AND type="+
+				sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				ids.add(rs.getInt(1));
+			}
+		}
+		catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
+		if (ids.isEmpty()) return null;
+		return ids;
+	}
+
+	public HashMap<Integer,HashSet<Integer>> getSourceRelSourceIds(int sourcerel_type) {
+		HashMap<Integer,HashSet<Integer>> ids = new HashMap<Integer,HashSet<Integer>>();
+		String query = MySQL.SELECT +"source1_id, source2_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE type="+sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				Integer id1 = rs.getInt(1);
+				HashSet<Integer> id1Rel = ids.get(id1);
+				if (id1Rel==null) id1Rel = new HashSet<Integer>();
+				id1Rel.add( rs.getInt(2));
+				ids.put(id1, id1Rel);
+			}
+		}
+		catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
+		if (ids.isEmpty()) return null;
+		return ids;
+	}
+
+	public HashSet<Integer> getSourceRelIds(int sourcerel_type) {
+		HashSet<Integer> ids = new HashSet<Integer>();
+		String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE type="+sourcerel_type+" AND status='"+STATUS_IMPORT_DONE+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				Integer id1 = rs.getInt(1);
+				ids.add(id1);
+			}
+		}
+		catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
+		if (ids.isEmpty()) return null;
+		return ids;
+	}
+
+	public int getSourceRelIdWithName(int sourceId1, int sourceId2, String name) {
+		if (sourceId1==Source.UNDEF || sourceId2==Source.UNDEF){
+			return SourceRelationship.UNDEF;
+		}
+		String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE source1_id=" + sourceId1 + " AND source2_id=" + sourceId2 +
+				" AND name='"+name+"' AND status='"+STATUS_IMPORT_DONE+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()){
+				return rs.getInt(1);
+			}
+		}
+		catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
+		return SourceRelationship.UNDEF;
+	}
+
+
+	public HashSet<Integer> getSourceRelIds(int sourceId1, int sourceId2) {
+		if (sourceId1==Source.UNDEF || sourceId2==Source.UNDEF){
+			return null;
+		}
+		HashSet<Integer> relIds = new HashSet<Integer>();
+		String query = MySQL.SELECT +"sourcerel_id FROM " + TABLE_SOURCE_REL + " " +
+				"WHERE ((source1_id=" + sourceId1 + " AND source2_id=" + sourceId2 + ") " +
+				"OR (source1_id=" + sourceId2 + " AND source2_id=" + sourceId1 + ")) " +
+				" AND status='"+STATUS_IMPORT_DONE+"'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				relIds.add(rs.getInt(1));
+			}
+		}
+		catch (SQLException e) { System.out.println("getSourceRelId(): " + e.getMessage());  }
+		if (relIds.isEmpty()) return null;
+		return relIds;
+	}
+
+
+	public int getObjectId(int sourceId, String acc, int kind) {
+		if (sourceId==Source.UNDEF){
+			return Element.UNDEF;
+		}
+		int id = Element.UNDEF;
+		String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT +
+				" WHERE source_id = " + sourceId + " AND accession = '" + acc + "'" + " AND kind = " + kind;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()) id = rs.getInt(1);
+		}
+		catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
+		return id;
+	}
+
+	public int getObjectIdNotKind(int sourceId, String acc, int kind) {
+		if (sourceId==Source.UNDEF){
+			return Element.UNDEF;
+		}
+		int id = Element.UNDEF;
+		String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT +
+				" WHERE source_id = " + sourceId + " AND accession = '" + acc + "'" + " AND kind != " + kind;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()) id = rs.getInt(1);
+		}
+		catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
+		return id;
+	}
+
+	public int getObjectIdEndingNotKind(int sourceId, String acc, int kind) {
+		if (sourceId==Source.UNDEF){
+			return Element.UNDEF;
+		}
+		int id = Element.UNDEF;
+		String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT +
+				" WHERE source_id = " + sourceId + " AND accession Like '%" + acc + "'" + " AND kind != " + kind;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()) id = rs.getInt(1);
+		}
+		catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
+		return id;
+	}
+
+	public boolean sourceHasPaths(int sourceId) {
+		if (sourceId==Source.UNDEF){
 			return false;
-	  }
-	  
-	  //--------------------------------------------------------------------------//
-	  // Delete routines                                                          //
-	  //--------------------------------------------------------------------------//
-	  public void deleteSource(int id) {
-		  if (id==UNDEF){
-			  return;
-		  }
-		  String[] queries = new String[2];
-		  queries[0] = "DELETE FROM " + TABLE_OBJECT + " WHERE source_id=" + id;
-		  queries[1] = "DELETE FROM " + TABLE_SOURCE + " WHERE source_id=" + id;
-		  executeBatch(queries);
-	  }
-	  
-	  public void deleteSourceRel(int id) {
-		  String[] queries = new String[2];
-		  queries[0] = "DELETE FROM " + TABLE_OBJECT_REL + " WHERE sourcerel_id=" + id;
-		  queries[1] = "DELETE FROM " + TABLE_SOURCE_REL + " WHERE sourcerel_id=" + id;
-		  executeBatch(queries);
-	  }
-	  
-	  public void deleteSourceWithSourceRel(int id) {
-		  String[] queries = new String[2];
-		  queries[0] = "DELETE FROM " + TABLE_OBJECT + " WHERE source_id=" + id;
-		  queries[1] = "DELETE FROM " + TABLE_SOURCE + " WHERE source_id=" + id;
-		  executeBatch(queries);
-		  
-		  ArrayList<Integer> list2 = getSubSources(id);
-		  if (list2!=null)
-			  for (Integer source_id : list2) {
-				  deleteSource(source_id);
-			  }
-		  int supersource_id =getSuperSource(id);
-		  
-		  HashSet<Integer> list = getSourceRelId(id);
-		  for (Integer rel_id : list) {
-			  deleteSourceRel(rel_id);
-		  }
-		  
-		  list2 = getSubSources(supersource_id);
-		  if (list2==null){
-			  deleteSource(supersource_id);
-		  }
-	  }
-	  
-	  public void deleteInstances(int id){
-		  if (existInstancesTable(id)){	  
-			   String query= MySQL.DROP_TABLE + TABLE_INSTANCES + id;
-			   executeQuery(query);
-		  }
-	  }
-	  
-	  public void deleteMatchResultDBs(){
-			// delete MatchResult tmp tables	
-			String query = "SHOW TABLES LIKE 'MatchResult_%'";
-			try {
-				ResultSet rs = statement.executeQuery(query);
-				ArrayList<String> list = new ArrayList<String>();
-				while (rs.next()) {
-					String value = rs.getString(1);
-					list.add(value);
-				}
-				for (String value : list) {
-					query = "DROP TABLE IF EXISTS " +  value;
-					statement.execute(query);
+		}
+		String query = MySQL.SELECT +"count(*) FROM " + TABLE_OBJECT +
+				" WHERE source_id = " + sourceId + " AND kind = " + Element.KIND_ELEMPATH;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()){
+				int count = rs.getInt(1);
+				if (count>0){
+					return true;
 				}
-				query = "SHOW TABLES LIKE 'MatchResult_%'";
-				 rs = statement.executeQuery(query);
-				list = new ArrayList<String>();
-				 while (rs.next()) {
-					 String value = rs.getString(1);
-					 list.add(value);
-				 }
-				 for (String value : list) {
-					 query = "DROP VIEW IF EXISTS " +  value;
-					 statement.execute(query);
-				 }
-			}
-			catch (SQLException e) { 
-				System.out.println("dropRepositorySchema(): " + e.getMessage()); 
-			}
-	  }
-
-	  void deleteInstanceTables(){
-		    String database = System.getProperty("comaUrl");
-		    database=database.substring(database.lastIndexOf("/")+1);
-		    if (database.contains("?")){
-		    	 database=database.substring(0, database.indexOf("?"));
-		    }
-		    String query = "select table_name from INFORMATION_SCHEMA.TABLES where table_schema='"+database+"' and table_name" +
+			}
+		}
+		catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
+		return false;
+	}
+
+	public HashSet<Integer> getObjectIdEndWithAcc(int sourceId, String acc) {
+		if (sourceId==Source.UNDEF){
+			return null;
+		}
+		HashSet<Integer> ids = new HashSet<Integer>();
+		String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT +
+				" WHERE source_id = " + sourceId + " AND accession LIKE '%" + acc + "'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+
+			while (rs.next()){
+				int id = rs.getInt(1);
+				ids.add(id);
+			}
+			if (ids.isEmpty()) return null;
+		}
+		catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
+		return ids;
+	}
+
+	public HashSet<Integer> getObjectIds(int sourceId) {
+		if (sourceId==Source.UNDEF){
+			return null;
+		}
+		HashSet<Integer> ids = new HashSet<Integer>();
+		String query = MySQL.SELECT +"object_id FROM " + TABLE_OBJECT +
+				" WHERE source_id = " + sourceId ;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				int id = rs.getInt(1);
+				ids.add(id);
+			}
+			if (ids.isEmpty()) return null;
+		}
+		catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
+		return ids;
+	}
+
+	public int getObjectRelCnt(int sourceRelId) {
+		if (sourceRelId==SourceRelationship.UNDEF){
+			return 0;
+		}
+		int size = 0;
+		String query = MySQL.SELECT +"COUNT(*) FROM " + TABLE_OBJECT_REL +
+				" WHERE sourcerel_id = " + sourceRelId ;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()){
+				size = rs.getInt(1);
+			}
+		}
+		catch (SQLException e) { System.out.println("getObjectId(): " + e.getMessage());  }
+		return size;
+	}
+
+	public int getSourceRelCount(int sourcerel_id) {
+		String query = MySQL.SELECT +" count(*) " +
+				"FROM " + TABLE_OBJECT_REL + " WHERE sourcerel_id="+sourcerel_id;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()){
+				return rs.getInt(1);
+			}
+		}
+		catch (SQLException e) { System.out.println("getSourceRelCount(): " + e.getMessage());  }
+		return -1;
+	}
+
+	public boolean existObjectRel(int sourceRelId, int obj1Id, int obj2Id) {
+		String query = MySQL.SELECT +"* FROM " + TABLE_OBJECT_REL +
+				" WHERE sourcerel_id = " + sourceRelId + " AND object1_id = " + obj1Id + " AND object2_id = " + obj2Id ;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()) return true;
+		}
+		catch (SQLException e) { System.out.println("existObjectRel(): " + e.getMessage());  }
+		return false;
+	}
+
+	public boolean existWorkflowVariable(String name) {
+		String query = MySQL.SELECT +"* FROM " + TABLE_WORKFLOW +
+				" WHERE name = '" + name + "'" ;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			if (rs.next()) return true;
+		}
+		catch (SQLException e) { System.out.println("existObjectRel(): " + e.getMessage());  }
+		return false;
+	}
+
+	public HashSet<Source> getSources() {
+		String query = MySQL.SELECT +"* FROM " + TABLE_SOURCE + " WHERE status='"+STATUS_IMPORT_DONE+"'";
+		HashSet<Source> sources = new HashSet<Source>();
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()) {
+				int id = rs.getInt("source_id");
+				String name = rs.getString("name");
+				String type = rs.getString("type");
+				String url = rs.getString("url");
+				String provider = rs.getString("provider");
+				String date = rs.getString("date");
+				// additional: author, domain, version
+				String author = rs.getString("author");
+				String domain = rs.getString("domain");
+				String version = rs.getString("version");
+				String comment = rs.getString("comment");
+				Source source = new Source(id, name, type, url, provider, date, author, domain, version, comment);
+				sources.add(source);
+			}
+		}
+		catch (SQLException e) {
+			System.out.println("getSources(): " + e.getMessage());
+			if (e.getMessage().contains("doesn't exist")){
+				createRepositorySchema();
+				System.out.println("create repository schema");
+			}
+		}
+		if (sources.isEmpty()) return null;
+		return sources;
+	}
+
+
+	/**
+	 * @return SourceRelationship (all existing)
+	 */
+	public HashSet<SourceRelationship> getSourceRels() {
+		HashSet<SourceRelationship> sourceRels = new HashSet<SourceRelationship>();
+
+		String query = MySQL.SELECT +"* FROM " + TABLE_SOURCE_REL;
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			while (rs.next()) {
+				int sourcerel_id = rs.getInt("sourcerel_id");
+				int source1Id = rs.getInt("source1_id");
+				int source2Id = rs.getInt("source2_id");
+				int type = rs.getInt("type");
+				String name = rs.getString("name");
+				String comment = rs.getString("comment");
+				String provider = rs.getString("provider");
+				int preprocessing = rs.getInt("preprocessing");
+				String date = rs.getString("date");
+				String status = rs.getString("status");
+				SourceRelationship sourcerel = new SourceRelationship(sourcerel_id, source1Id, source2Id,
+						type, name, comment, provider, preprocessing, date, status);
+				sourceRels.add(sourcerel);
+			}
+		}
+		catch (SQLException e) {
+			System.out.println("getSourceRelationship(): " + e.getMessage());
+		}
+		if (sourceRels.isEmpty()) return null;
+		return sourceRels;
+	}
+
+	public String toSQLString(List list) {
+		if (list==null || list.isEmpty()) return null;
+		StringBuffer sb = new StringBuffer();
+		int listSize = list.size();
+		sb.append("(");
+		for (int i=0; i<listSize-1; i++){
+			sb.append("'").append(list.get(i)).append("',");
+		}
+		sb.append("'").append(list.get(listSize-1)).append("')");
+		return sb.toString();
+	}
+
+	public String intToSQLString(List<Integer> list) {
+		if (list==null || list.isEmpty()) return null;
+		StringBuffer sb = new StringBuffer();
+		int listSize = list.size();
+		sb.append("(");
+		for (int i=0; i<listSize-1; i++){
+			sb.append(list.get(i)).append(",");
+		}
+		sb.append(list.get(listSize-1)).append(")");
+		return sb.toString();
+	}
+
+	public String toSQLString(Set list) {
+		if (list==null || list.isEmpty()) return null;
+		StringBuffer sb = new StringBuffer();
+		sb.append("(");
+		for (Object object : list) {
+			sb.append("'").append(object).append("',");
+		}
+		sb.deleteCharAt(sb.lastIndexOf(","));
+		sb.append(")");
+		return sb.toString();
+	}
+
+	public String toSQLIDString(Set<Element> list) {
+		if (list==null || list.isEmpty()) return null;
+		StringBuffer sb = new StringBuffer();
+		sb.append("(");
+		for (Element element : list) {
+			sb.append("'").append(element.getId()).append("',");
+		}
+		sb.deleteCharAt(sb.lastIndexOf(","));
+		sb.append(")");
+		return sb.toString();
+	}
+
+	public boolean isInstancesTableEmpty(int id){
+//		    System.out.print("Is Instance table  ("+id+") ? ");
+		String query = MySQL.SELECT + " * FROM " + TABLE_INSTANCES + id;
+		ResultSet resultSet;
+		try {
+			resultSet = statement.executeQuery(query);
+			if  (resultSet.next()) {
+				return false;
+			}
+		} catch (SQLException e) {
+			System.out.println("Repository.existInstanceTable: SQLException");
+		}
+		return true;
+	}
+
+	public boolean existInstancesTable(int id){
+//		String database = System.getProperty("comaUrl");
+//		if (database.indexOf("?")>-1){
+//			database = database.substring(0,database.indexOf("?"));
+//		}
+//		database=database.substring(database.lastIndexOf("/")+1);
+		String query = MySQL.SELECT + "* FROM " + MySQL.INFO_TABLE + " WHERE tbl_name='"+TABLE_INSTANCES+id+"'";
+//		    executeQuery(query);
+		ResultSet resultSet;
+		try {
+			resultSet = statement.executeQuery(query);
+			if  (resultSet.next()) {
+				return true;
+			}
+		} catch (SQLException e) {
+			System.out.println("Repository.existInstanceTable: SQLException");
+		}
+		return false;
+	}
+
+	//--------------------------------------------------------------------------//
+	// Delete routines                                                          //
+	//--------------------------------------------------------------------------//
+	public void deleteSource(int id) {
+		if (id==UNDEF){
+			return;
+		}
+		String[] queries = new String[2];
+		queries[0] = "DELETE FROM " + TABLE_OBJECT + " WHERE source_id=" + id;
+		queries[1] = "DELETE FROM " + TABLE_SOURCE + " WHERE source_id=" + id;
+		executeBatch(queries);
+	}
+
+	public void deleteSourceRel(int id) {
+		String[] queries = new String[2];
+		queries[0] = "DELETE FROM " + TABLE_OBJECT_REL + " WHERE sourcerel_id=" + id;
+		queries[1] = "DELETE FROM " + TABLE_SOURCE_REL + " WHERE sourcerel_id=" + id;
+		executeBatch(queries);
+	}
+
+	public void deleteSourceWithSourceRel(int id) {
+		String[] queries = new String[2];
+		queries[0] = "DELETE FROM " + TABLE_OBJECT + " WHERE source_id=" + id;
+		queries[1] = "DELETE FROM " + TABLE_SOURCE + " WHERE source_id=" + id;
+		executeBatch(queries);
+
+		ArrayList<Integer> list2 = getSubSources(id);
+		if (list2!=null)
+			for (Integer source_id : list2) {
+				deleteSource(source_id);
+			}
+		int supersource_id =getSuperSource(id);
+
+		HashSet<Integer> list = getSourceRelId(id);
+		for (Integer rel_id : list) {
+			deleteSourceRel(rel_id);
+		}
+
+		list2 = getSubSources(supersource_id);
+		if (list2==null){
+			deleteSource(supersource_id);
+		}
+	}
+
+	public void deleteInstances(int id){
+		if (existInstancesTable(id)){
+			String query= MySQL.DROP_TABLE + TABLE_INSTANCES + id;
+			executeQuery(query);
+		}
+	}
+
+	public void deleteMatchResultDBs(){
+		// delete MatchResult tmp tables
+		String query = "SHOW TABLES LIKE 'MatchResult_%'";
+		try {
+			ResultSet rs = statement.executeQuery(query);
+			ArrayList<String> list = new ArrayList<String>();
+			while (rs.next()) {
+				String value = rs.getString(1);
+				list.add(value);
+			}
+			for (String value : list) {
+				query = "DROP TABLE IF EXISTS " +  value;
+				statement.execute(query);
+			}
+			query = "SHOW TABLES LIKE 'MatchResult_%'";
+			rs = statement.executeQuery(query);
+			list = new ArrayList<String>();
+			while (rs.next()) {
+				String value = rs.getString(1);
+				list.add(value);
+			}
+			for (String value : list) {
+				query = "DROP VIEW IF EXISTS " +  value;
+				statement.execute(query);
+			}
+		}
+		catch (SQLException e) {
+			System.out.println("dropRepositorySchema(): " + e.getMessage());
+		}
+	}
+
+	void deleteInstanceTables(){
+		String database = System.getProperty("comaUrl");
+		database=database.substring(database.lastIndexOf("/")+1);
+		if (database.contains("?")){
+			database=database.substring(0, database.indexOf("?"));
+		}
+		String query = "select table_name from INFORMATION_SCHEMA.TABLES where table_schema='"+database+"' and table_name" +
 //		    		">'" +TABLE_INSTANCES+"' and table_name<'"+TABLE_INSTANCES+"A'";
-		    	" LIKE '" +TABLE_INSTANCES+"%'";
+				" LIKE '" +TABLE_INSTANCES+"%'";
 //		    String query = "show tables";
-		    ResultSet resultSet;
-			try {
-				ArrayList<String> tables = new ArrayList<String>();
-				resultSet = statement.executeQuery(query);
-			    while (resultSet.next()){
-			    	  tables.add(resultSet.getString("table_name"));
-			    }
-				String[] queries = new String[tables.size()];
-			    for (int j=0; j<tables.size(); j++){
-			    	  queries[j] =  MySQL.DROP_TABLE +  tables.get(j);
-			    }
-				executeBatch(queries);
-			} catch (SQLException e) {
-				e.printStackTrace();
-			}  
-	  }
-	  
-	  public void deleteWorkflowVariable(String name) {
-		  if (name==null){
-			  return;
-		  }
-		  String query = "DELETE FROM " + TABLE_WORKFLOW + " WHERE name='" + name + "'";
-		  try {
+		ResultSet resultSet;
+		try {
+			ArrayList<String> tables = new ArrayList<String>();
+			resultSet = statement.executeQuery(query);
+			while (resultSet.next()){
+				tables.add(resultSet.getString("table_name"));
+			}
+			String[] queries = new String[tables.size()];
+			for (int j=0; j<tables.size(); j++){
+				queries[j] =  MySQL.DROP_TABLE +  tables.get(j);
+			}
+			executeBatch(queries);
+		} catch (SQLException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public void deleteWorkflowVariable(String name) {
+		if (name==null){
+			return;
+		}
+		String query = "DELETE FROM " + TABLE_WORKFLOW + " WHERE name='" + name + "'";
+		try {
 			statement.execute(query);
 		} catch (SQLException e) {
-			System.out.println("Repository.deleteWorkflowVariable() Error deleting variable " 
+			System.out.println("Repository.deleteWorkflowVariable() Error deleting variable "
 					+ name + " " + e.getMessage());
 		}
-	  }
-	  
+	}
+
 }
diff -ruN coma-project/coma-engine/src/main/java/de/wdilab/coma/structure/MatchResult.java coma-project-final/coma-engine/src/main/java/de/wdilab/coma/structure/MatchResult.java
--- coma-project/coma-engine/src/main/java/de/wdilab/coma/structure/MatchResult.java	2020-02-28 16:51:35.049159000 +0100
+++ coma-project-final/coma-engine/src/main/java/de/wdilab/coma/structure/MatchResult.java	2020-02-12 15:35:48.000000000 +0100
@@ -710,25 +710,25 @@
 		}
 		
 		public String toString() {
-			String info=name;
-			info+=" ["+srcObjects.size()+","+trgObjects.size()+"] ";
-			if (sourceGraph!=null)
-				info+=sourceGraph.getSource().getName();
-			if (targetGraph!=null)
-				info+=targetGraph.getSource().getName();
-			
-			
+//			String info=name;
+//			info+=" ["+srcObjects.size()+","+trgObjects.size()+"] ";
+//			if (sourceGraph!=null)
+//				info+=sourceGraph.getSource().getName();
+//			if (targetGraph!=null)
+//				info+=targetGraph.getSource().getName();
+//
+			String info="";
 			StringBuffer sb = new StringBuffer();
-			sb.append("--------------------------------------------------------\n");
+//			sb.append("--------------------------------------------------------\n");
 		    int matchCnt = 0;
 		    for (int i=0; i<srcObjects.size(); i++) {
 		      Object srcObject = srcObjects.get(i);
 		      for (int j=0; j<trgObjects.size(); j++) {
 		        Object trgObject = trgObjects.get(j);
-		        float sim = getSimilarity(srcObject, trgObject);			        
+		        float sim = getSimilarity(srcObject, trgObject);
 		        if (sim>0) {
 		          matchCnt ++;
-		          sb.append(" - ");
+//		          sb.append(" - ");
 		          if (srcObject instanceof Path && trgObject instanceof Path)
 		            sb.append(((Path)srcObject).toNameString()).append(" <-> ").append(((Path)trgObject).toNameString());
 		          else if (srcObject instanceof Element && trgObject instanceof Element)
@@ -739,8 +739,8 @@
 		        }
 		      }
 		    }
-		    sb.append(" + Total: ").append(matchCnt).append(" correspondences\n");
-		    sb.append("--------------------------------------------------------\n");
+//		    sb.append(" + Total: ").append(matchCnt).append(" correspondences\n");
+//		    sb.append("--------------------------------------------------------\n");
 		    info+= sb.toString();
 			
 			
diff -ruN coma-project/coma-engine/src/main/java/Main.java coma-project-final/coma-engine/src/main/java/Main.java
--- coma-project/coma-engine/src/main/java/Main.java	1970-01-01 01:00:00.000000000 +0100
+++ coma-project-final/coma-engine/src/main/java/Main.java	2020-02-28 18:18:40.000000000 +0100
@@ -0,0 +1,30 @@
+import de.wdilab.coma.integration.COMA_API;
+
+import java.io.File;
+
+
+public class Main {
+
+    public static void main(String[] _args) throws Exception {
+        // No need to explicitly create the Sqlite database. It will be created on connection. The beauty of an embedded database.
+
+        System.out.println("Program arguments passed to the main method:");
+        for (String arg : _args) {
+            System.out.println("\n" + arg);
+        }
+        System.out.println("VM arguments (system properties) passed to the main method:");
+        System.out.println("  inputFile1: " + System.getProperty("inputFile1"));
+        System.out.println("  inputFile2: " + System.getProperty("inputFile2"));
+        System.out.println("  outputFile: " + System.getProperty("outputFile"));
+        System.out.println("  strategy: " + System.getProperty("strategy"));
+        System.out.println("  maxN: " + System.getProperty("maxN"));
+        System.out.println();
+
+        COMA_API api = new COMA_API();
+
+        api.matchModelsDefault(System.getProperty("inputFile1"),
+                System.getProperty("inputFile2"),
+                System.getProperty("outputFile"));
+
+    }
+}
diff -ruN coma-project/coma-engine/src/main/java/META-INF/MANIFEST.MF coma-project-final/coma-engine/src/main/java/META-INF/MANIFEST.MF
--- coma-project/coma-engine/src/main/java/META-INF/MANIFEST.MF	1970-01-01 01:00:00.000000000 +0100
+++ coma-project-final/coma-engine/src/main/java/META-INF/MANIFEST.MF	2020-02-28 18:18:40.000000000 +0100
@@ -0,0 +1,3 @@
+Manifest-Version: 1.0
+Main-Class: Main
+
diff -ruN coma-project/pom.xml coma-project-final/pom.xml
--- coma-project/pom.xml	2020-02-28 16:51:34.641159000 +0100
+++ coma-project-final/pom.xml	2020-02-29 15:49:13.671523000 +0100
@@ -7,34 +7,13 @@
   <version>0.1-SNAPSHOT</version>
   <packaging>pom</packaging>
 
-  <name>coma-project</name>
-  <url>http://maven.apache.org</url>
-
   <properties>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
   </properties>
 
-   <distributionManagement>
-       <repository>
-         <id>nexus-wdi-wg-2</id>
-         <url>http://wdiserv1:8080/nexus/content/repositories/wdi-wg2-releases</url>
-       </repository>
-       <snapshotRepository>
-         <id>nexus-wdi-wg-2</id>
-         <url>http://wdiserv1:8080/nexus/content/repositories/wdi-wg2-snapshots</url>
-       </snapshotRepository>
-   </distributionManagement>
-
-  <dependencies>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>3.8.1</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
   <modules>
     <module>coma-engine</module>
     <module>coma-gui</module>
   </modules>
+
 </project>
\ No newline at end of file
